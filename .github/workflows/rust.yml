# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Rust

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
    paths-ignore:
      - "docs/**"
      - "**.md"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/pull_request_template.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "**.md"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/pull_request_template.md"
  # manual trigger
  # https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow
  workflow_dispatch:

jobs:
  # Check crate compiles
  linux-build-lib:
    name: cargo check
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
    steps:
      - uses: actions/checkout@v3
      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          # these represent dependencies downloaded by cargo
          # and thus do not depend on the OS, arch nor rust version.
          path: /github/home/.cargo
          key: cargo-cache-
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
        with:
          rust-version: stable

      - name: Check workspace without default features
        run: cargo check --no-default-features -p datafusion

      - name: Check workspace in debug mode
        run: cargo check

      # Note: this does not include dictionary_expressions to reduce codegen
      - name: Check workspace with all features
        run: cargo check --workspace --benches --features avro,jit,scheduler,json

      - name: Check Cargo.lock for datafusion-cli
        run: |
          # If this test fails, try running `cargo update` in the `datafusion-cli` directory
          # and check in the updated Cargo.lock file.
          cargo check --manifest-path datafusion-cli/Cargo.toml --locked

  # test the crate
  linux-test:
    name: cargo test (amd64)
    needs: [ linux-build-lib ]
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: /github/home/.cargo
          # this key equals the ones on `linux-build-lib` for re-use
          key: cargo-cache-
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
        with:
          rust-version: stable
      - name: Run tests (excluding doctests)
        run: cargo test --lib --tests --bins --features avro,jit,scheduler,json,dictionary_expressions
      - name: Verify Working Directory Clean
        run: git diff --exit-code

  linux-test-example:
    name: cargo examples (amd64)
    needs: [ linux-build-lib ]
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
        with:
          rust-version: stable
      - name: Run examples
        run: |
          # test datafusion-sql examples
          cargo run --example sql
          # test datafusion-examples
          cargo run --example avro_sql --features=datafusion/avro
          cargo run --example csv_sql
          cargo run --example custom_datasource
          cargo run --example dataframe
          cargo run --example dataframe_in_memory
          cargo run --example deserialize_to_struct
          cargo run --example expr_api
          cargo run --example parquet_sql
          cargo run --example parquet_sql_multiple_files
          cargo run --example memtable
          cargo run --example rewrite_expr
          cargo run --example simple_udf
          cargo run --example simple_udaf
      - name: Verify Working Directory Clean
        run: git diff --exit-code

  # Run doc tests
  linux-test-doc:
    name: cargo doctest (amd64)
    needs: [ linux-build-lib ]
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
        with:
          rust-version: stable
      # Note: this does not include dictionary_expressions to reduce codegen
      - name: Run doctests
        run: cargo test --doc --features avro,jit,scheduler,json
      - name: Verify Working Directory Clean
        run: git diff --exit-code

  vendor:
    name: Verify Vendored Code
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
      - name: Run gen
        run: ./regen.sh
        working-directory: ./datafusion/proto
      - name: Verify workspace clean (if this fails, run ./datafusion/proto/regen.sh and check in results)
        run: git diff --exit-code

  check-fmt:
    name: Check cargo fmt
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
        with:
          rust-version: stable
      - name: Run
        run: |
          echo '' > datafusion/proto/src/generated/datafusion.rs
          ci/scripts/rust_fmt.sh

  # Coverage job disabled due to
  # https://github.com/apache/arrow-datafusion/issues/3678

   coverage:
     name: coverage
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v3
         with:
           submodules: true
       - name: Install protobuf compiler
         shell: bash
         run: |
           mkdir -p $HOME/d/protoc
           cd $HOME/d/protoc
           export PROTO_ZIP="protoc-21.4-linux-x86_64.zip"
           curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v21.4/$PROTO_ZIP
           unzip $PROTO_ZIP
           export PATH=$PATH:$HOME/d/protoc/bin
           protoc --version
       - name: Setup Rust toolchain
         run: |
           rustup toolchain install stable
           rustup default stable
           rustup component add rustfmt clippy
       - name: Cache Cargo
         uses: actions/cache@v3
         with:
           path: /home/runner/.cargo
           # this key is not equal because the user is different than on a container (runner vs github)
           key: cargo-coverage-cache3-
       - name: Run coverage
         run: |
           export PATH=$PATH:$HOME/d/protoc/bin
           rustup toolchain install stable
           rustup default stable
           cargo install --version 0.20.1 cargo-tarpaulin
           cargo tarpaulin --all --out Xml
       - name: Report coverage
         continue-on-error: true
         run: bash <(curl -s https://codecov.io/bash)
