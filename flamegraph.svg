<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="20899"><g><title>csv_sql`&lt;datafusion::datasource::physical_plan::parquet::ParquetOpener as datafusion::datasource::physical_plan::file_stream::FileOpener&gt;::open::_{{closure}} (3 samples, 0.01%)</title><rect x="0.0670%" y="293" width="0.0144%" height="15" fill="rgb(227,0,7)" fg:x="14" fg:w="3"/><text x="0.3170%" y="303.50"></text></g><g><title>csv_sql`&lt;parquet::arrow::async_reader::store::ParquetObjectReader as parquet::arrow::async_reader::AsyncFileReader&gt;::get_metadata::_{{closure}} (3 samples, 0.01%)</title><rect x="0.0670%" y="277" width="0.0144%" height="15" fill="rgb(217,0,24)" fg:x="14" fg:w="3"/><text x="0.3170%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.01%)</title><rect x="0.1483%" y="197" width="0.0144%" height="15" fill="rgb(221,193,54)" fg:x="31" fg:w="3"/><text x="0.3983%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (3 samples, 0.01%)</title><rect x="0.1483%" y="181" width="0.0144%" height="15" fill="rgb(248,212,6)" fg:x="31" fg:w="3"/><text x="0.3983%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="0.1483%" y="165" width="0.0144%" height="15" fill="rgb(208,68,35)" fg:x="31" fg:w="3"/><text x="0.3983%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="0.1483%" y="149" width="0.0144%" height="15" fill="rgb(232,128,0)" fg:x="31" fg:w="3"/><text x="0.3983%" y="159.50"></text></g><g><title>csv_sql`&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (5 samples, 0.02%)</title><rect x="0.1435%" y="229" width="0.0239%" height="15" fill="rgb(207,160,47)" fg:x="30" fg:w="5"/><text x="0.3935%" y="239.50"></text></g><g><title>csv_sql`arrow_array::array::byte_array::_&lt;impl core::convert::From&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (4 samples, 0.02%)</title><rect x="0.1483%" y="213" width="0.0191%" height="15" fill="rgb(228,23,34)" fg:x="31" fg:w="4"/><text x="0.3983%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (4 samples, 0.02%)</title><rect x="0.1914%" y="197" width="0.0191%" height="15" fill="rgb(218,30,26)" fg:x="40" fg:w="4"/><text x="0.4414%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (4 samples, 0.02%)</title><rect x="0.1914%" y="181" width="0.0191%" height="15" fill="rgb(220,122,19)" fg:x="40" fg:w="4"/><text x="0.4414%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="0.1914%" y="165" width="0.0191%" height="15" fill="rgb(250,228,42)" fg:x="40" fg:w="4"/><text x="0.4414%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="0.1914%" y="149" width="0.0191%" height="15" fill="rgb(240,193,28)" fg:x="40" fg:w="4"/><text x="0.4414%" y="159.50"></text></g><g><title>csv_sql`&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt; as arrow_array::array::Array&gt;::to_data (15 samples, 0.07%)</title><rect x="0.1435%" y="245" width="0.0718%" height="15" fill="rgb(216,20,37)" fg:x="30" fg:w="15"/><text x="0.3935%" y="255.50"></text></g><g><title>csv_sql`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (10 samples, 0.05%)</title><rect x="0.1675%" y="229" width="0.0478%" height="15" fill="rgb(206,188,39)" fg:x="35" fg:w="10"/><text x="0.4175%" y="239.50"></text></g><g><title>csv_sql`arrow_array::array::primitive_array::_&lt;impl core::convert::From&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (7 samples, 0.03%)</title><rect x="0.1818%" y="213" width="0.0335%" height="15" fill="rgb(217,207,13)" fg:x="38" fg:w="7"/><text x="0.4318%" y="223.50"></text></g><g><title>csv_sql`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (3 samples, 0.01%)</title><rect x="0.2392%" y="229" width="0.0144%" height="15" fill="rgb(231,73,38)" fg:x="50" fg:w="3"/><text x="0.4892%" y="239.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (6 samples, 0.03%)</title><rect x="0.2727%" y="229" width="0.0287%" height="15" fill="rgb(225,20,46)" fg:x="57" fg:w="6"/><text x="0.5227%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.01%)</title><rect x="0.2871%" y="213" width="0.0144%" height="15" fill="rgb(210,31,41)" fg:x="60" fg:w="3"/><text x="0.5371%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.02%)</title><rect x="0.3014%" y="229" width="0.0239%" height="15" fill="rgb(221,200,47)" fg:x="63" fg:w="5"/><text x="0.5514%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (5 samples, 0.02%)</title><rect x="0.3014%" y="213" width="0.0239%" height="15" fill="rgb(226,26,5)" fg:x="63" fg:w="5"/><text x="0.5514%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.02%)</title><rect x="0.3014%" y="197" width="0.0239%" height="15" fill="rgb(249,33,26)" fg:x="63" fg:w="5"/><text x="0.5514%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.02%)</title><rect x="0.3014%" y="181" width="0.0239%" height="15" fill="rgb(235,183,28)" fg:x="63" fg:w="5"/><text x="0.5514%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="0.3110%" y="165" width="0.0144%" height="15" fill="rgb(221,5,38)" fg:x="65" fg:w="3"/><text x="0.5610%" y="175.50"></text></g><g><title>csv_sql`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.25%)</title><rect x="0.0909%" y="277" width="0.2488%" height="15" fill="rgb(247,18,42)" fg:x="19" fg:w="52"/><text x="0.3409%" y="287.50"></text></g><g><title>csv_sql`arrow_cast::cast::cast_with_options (43 samples, 0.21%)</title><rect x="0.1340%" y="261" width="0.2058%" height="15" fill="rgb(241,131,45)" fg:x="28" fg:w="43"/><text x="0.3840%" y="271.50"></text></g><g><title>csv_sql`arrow_array::array::make_array (25 samples, 0.12%)</title><rect x="0.2201%" y="245" width="0.1196%" height="15" fill="rgb(249,31,29)" fg:x="46" fg:w="25"/><text x="0.4701%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.01%)</title><rect x="0.3254%" y="229" width="0.0144%" height="15" fill="rgb(225,111,53)" fg:x="68" fg:w="3"/><text x="0.5754%" y="239.50"></text></g><g><title>csv_sql`&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as arrow_array::array::Array&gt;::len (4 samples, 0.02%)</title><rect x="0.3541%" y="261" width="0.0191%" height="15" fill="rgb(238,160,17)" fg:x="74" fg:w="4"/><text x="0.6041%" y="271.50"></text></g><g><title>csv_sql`&lt;arrow_array::array::struct_array::StructArray as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="0.3924%" y="261" width="0.0144%" height="15" fill="rgb(214,148,48)" fg:x="82" fg:w="3"/><text x="0.6424%" y="271.50"></text></g><g><title>csv_sql`&lt;arrow_array::record_batch::RecordBatch as core::convert::From&lt;arrow_array::array::struct_array::StructArray&gt;&gt;::from (3 samples, 0.01%)</title><rect x="0.4067%" y="261" width="0.0144%" height="15" fill="rgb(232,36,49)" fg:x="85" fg:w="3"/><text x="0.6567%" y="271.50"></text></g><g><title>csv_sql`&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (3 samples, 0.01%)</title><rect x="0.4833%" y="245" width="0.0144%" height="15" fill="rgb(209,103,24)" fg:x="101" fg:w="3"/><text x="0.7333%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.05%)</title><rect x="0.5216%" y="181" width="0.0526%" height="15" fill="rgb(229,88,8)" fg:x="109" fg:w="11"/><text x="0.7716%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.05%)</title><rect x="0.5216%" y="165" width="0.0526%" height="15" fill="rgb(213,181,19)" fg:x="109" fg:w="11"/><text x="0.7716%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.03%)</title><rect x="0.5455%" y="149" width="0.0287%" height="15" fill="rgb(254,191,54)" fg:x="114" fg:w="6"/><text x="0.7955%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (12 samples, 0.06%)</title><rect x="0.5216%" y="213" width="0.0574%" height="15" fill="rgb(241,83,37)" fg:x="109" fg:w="12"/><text x="0.7716%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (12 samples, 0.06%)</title><rect x="0.5216%" y="197" width="0.0574%" height="15" fill="rgb(233,36,39)" fg:x="109" fg:w="12"/><text x="0.7716%" y="207.50"></text></g><g><title>csv_sql`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (19 samples, 0.09%)</title><rect x="0.5024%" y="245" width="0.0909%" height="15" fill="rgb(226,3,54)" fg:x="105" fg:w="19"/><text x="0.7524%" y="255.50"></text></g><g><title>csv_sql`arrow_array::array::primitive_array::_&lt;impl core::convert::From&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (19 samples, 0.09%)</title><rect x="0.5024%" y="229" width="0.0909%" height="15" fill="rgb(245,192,40)" fg:x="105" fg:w="19"/><text x="0.7524%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.01%)</title><rect x="0.5790%" y="213" width="0.0144%" height="15" fill="rgb(238,167,29)" fg:x="121" fg:w="3"/><text x="0.8290%" y="223.50"></text></g><g><title>csv_sql`&lt;arrow_data::data::ArrayData as core::clone::Clone&gt;::clone (10 samples, 0.05%)</title><rect x="0.6029%" y="229" width="0.0478%" height="15" fill="rgb(232,182,51)" fg:x="126" fg:w="10"/><text x="0.8529%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc (7 samples, 0.03%)</title><rect x="0.6173%" y="213" width="0.0335%" height="15" fill="rgb(231,60,39)" fg:x="129" fg:w="7"/><text x="0.8673%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (6 samples, 0.03%)</title><rect x="0.6220%" y="197" width="0.0287%" height="15" fill="rgb(208,69,12)" fg:x="130" fg:w="6"/><text x="0.8720%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.03%)</title><rect x="0.6220%" y="181" width="0.0287%" height="15" fill="rgb(235,93,37)" fg:x="130" fg:w="6"/><text x="0.8720%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.03%)</title><rect x="0.6220%" y="165" width="0.0287%" height="15" fill="rgb(213,116,39)" fg:x="130" fg:w="6"/><text x="0.8720%" y="175.50"></text></g><g><title>csv_sql`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (3 samples, 0.01%)</title><rect x="0.7273%" y="213" width="0.0144%" height="15" fill="rgb(222,207,29)" fg:x="152" fg:w="3"/><text x="0.9773%" y="223.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (9 samples, 0.04%)</title><rect x="0.7560%" y="213" width="0.0431%" height="15" fill="rgb(206,96,30)" fg:x="158" fg:w="9"/><text x="1.0060%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.01%)</title><rect x="0.7847%" y="197" width="0.0144%" height="15" fill="rgb(218,138,4)" fg:x="164" fg:w="3"/><text x="1.0347%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (10 samples, 0.05%)</title><rect x="0.7991%" y="213" width="0.0478%" height="15" fill="rgb(250,191,14)" fg:x="167" fg:w="10"/><text x="1.0491%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (10 samples, 0.05%)</title><rect x="0.7991%" y="197" width="0.0478%" height="15" fill="rgb(239,60,40)" fg:x="167" fg:w="10"/><text x="1.0491%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.05%)</title><rect x="0.7991%" y="181" width="0.0478%" height="15" fill="rgb(206,27,48)" fg:x="167" fg:w="10"/><text x="1.0491%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.05%)</title><rect x="0.7991%" y="165" width="0.0478%" height="15" fill="rgb(225,35,8)" fg:x="167" fg:w="10"/><text x="1.0491%" y="175.50"></text></g><g><title>csv_sql`arrow_array::array::make_array (46 samples, 0.22%)</title><rect x="0.6507%" y="229" width="0.2201%" height="15" fill="rgb(250,213,24)" fg:x="136" fg:w="46"/><text x="0.9007%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.02%)</title><rect x="0.8469%" y="213" width="0.0239%" height="15" fill="rgb(247,123,22)" fg:x="177" fg:w="5"/><text x="1.0969%" y="223.50"></text></g><g><title>csv_sql`&lt;arrow_array::array::struct_array::StructArray as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (60 samples, 0.29%)</title><rect x="0.5933%" y="245" width="0.2871%" height="15" fill="rgb(231,138,38)" fg:x="124" fg:w="60"/><text x="0.8433%" y="255.50"></text></g><g><title>csv_sql`arrow_buffer::buffer::mutable::MutableBuffer::reallocate (7 samples, 0.03%)</title><rect x="0.9043%" y="229" width="0.0335%" height="15" fill="rgb(231,145,46)" fg:x="189" fg:w="7"/><text x="1.1543%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (6 samples, 0.03%)</title><rect x="0.9091%" y="213" width="0.0287%" height="15" fill="rgb(251,118,11)" fg:x="190" fg:w="6"/><text x="1.1591%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_memalign (6 samples, 0.03%)</title><rect x="0.9091%" y="197" width="0.0287%" height="15" fill="rgb(217,147,25)" fg:x="190" fg:w="6"/><text x="1.1591%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (5 samples, 0.02%)</title><rect x="0.9139%" y="181" width="0.0239%" height="15" fill="rgb(247,81,37)" fg:x="191" fg:w="5"/><text x="1.1639%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.01%)</title><rect x="0.9235%" y="165" width="0.0144%" height="15" fill="rgb(209,12,38)" fg:x="193" fg:w="3"/><text x="1.1735%" y="175.50"></text></g><g><title>csv_sql`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.01%)</title><rect x="0.9426%" y="213" width="0.0144%" height="15" fill="rgb(227,1,9)" fg:x="197" fg:w="3"/><text x="1.1926%" y="223.50"></text></g><g><title>csv_sql`alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="0.9426%" y="197" width="0.0144%" height="15" fill="rgb(248,47,43)" fg:x="197" fg:w="3"/><text x="1.1926%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.01%)</title><rect x="0.9426%" y="181" width="0.0144%" height="15" fill="rgb(221,10,30)" fg:x="197" fg:w="3"/><text x="1.1926%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (3 samples, 0.01%)</title><rect x="0.9426%" y="165" width="0.0144%" height="15" fill="rgb(210,229,1)" fg:x="197" fg:w="3"/><text x="1.1926%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="0.9426%" y="149" width="0.0144%" height="15" fill="rgb(222,148,37)" fg:x="197" fg:w="3"/><text x="1.1926%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="0.9426%" y="133" width="0.0144%" height="15" fill="rgb(234,67,33)" fg:x="197" fg:w="3"/><text x="1.1926%" y="143.50"></text></g><g><title>csv_sql`&lt;arrow_schema::datatype::DataType as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="0.9618%" y="197" width="0.0144%" height="15" fill="rgb(247,98,35)" fg:x="201" fg:w="3"/><text x="1.2118%" y="207.50"></text></g><g><title>csv_sql`arrow_array::array::make_array (12 samples, 0.06%)</title><rect x="0.9570%" y="213" width="0.0574%" height="15" fill="rgb(247,138,52)" fg:x="200" fg:w="12"/><text x="1.2070%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="0.9953%" y="197" width="0.0191%" height="15" fill="rgb(213,79,30)" fg:x="208" fg:w="4"/><text x="1.2453%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (4 samples, 0.02%)</title><rect x="1.0192%" y="213" width="0.0191%" height="15" fill="rgb(246,177,23)" fg:x="213" fg:w="4"/><text x="1.2692%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (4 samples, 0.02%)</title><rect x="1.0192%" y="197" width="0.0191%" height="15" fill="rgb(230,62,27)" fg:x="213" fg:w="4"/><text x="1.2692%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="1.0192%" y="181" width="0.0191%" height="15" fill="rgb(216,154,8)" fg:x="213" fg:w="4"/><text x="1.2692%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="1.0192%" y="165" width="0.0191%" height="15" fill="rgb(244,35,45)" fg:x="213" fg:w="4"/><text x="1.2692%" y="175.50"></text></g><g><title>csv_sql`parquet::arrow::buffer::offset_buffer::OffsetBuffer&lt;I&gt;::into_array (21 samples, 0.10%)</title><rect x="0.9426%" y="229" width="0.1005%" height="15" fill="rgb(251,115,12)" fg:x="197" fg:w="21"/><text x="1.1926%" y="239.50"></text></g><g><title>csv_sql`&lt;parquet::arrow::array_reader::byte_array::ByteArrayReader&lt;I&gt; as parquet::arrow::array_reader::ArrayReader&gt;::consume_batch (33 samples, 0.16%)</title><rect x="0.8900%" y="245" width="0.1579%" height="15" fill="rgb(240,54,50)" fg:x="186" fg:w="33"/><text x="1.1400%" y="255.50"></text></g><g><title>csv_sql`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (5 samples, 0.02%)</title><rect x="12.0723%" y="229" width="0.0239%" height="15" fill="rgb(233,84,52)" fg:x="2523" fg:w="5"/><text x="12.3223%" y="239.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;arrow_schema::datatype::DataType&gt; (3 samples, 0.01%)</title><rect x="12.0819%" y="213" width="0.0144%" height="15" fill="rgb(207,117,47)" fg:x="2525" fg:w="3"/><text x="12.3319%" y="223.50"></text></g><g><title>csv_sql`&lt;arrow_schema::datatype::DataType as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="12.0963%" y="229" width="0.0144%" height="15" fill="rgb(249,43,39)" fg:x="2528" fg:w="3"/><text x="12.3463%" y="239.50"></text></g><g><title>csv_sql`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.04%)</title><rect x="12.1106%" y="229" width="0.0383%" height="15" fill="rgb(209,38,44)" fg:x="2531" fg:w="8"/><text x="12.3606%" y="239.50"></text></g><g><title>csv_sql`alloc::raw_vec::finish_grow (8 samples, 0.04%)</title><rect x="12.1106%" y="213" width="0.0383%" height="15" fill="rgb(236,212,23)" fg:x="2531" fg:w="8"/><text x="12.3606%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (8 samples, 0.04%)</title><rect x="12.1106%" y="197" width="0.0383%" height="15" fill="rgb(242,79,21)" fg:x="2531" fg:w="8"/><text x="12.3606%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (8 samples, 0.04%)</title><rect x="12.1106%" y="181" width="0.0383%" height="15" fill="rgb(211,96,35)" fg:x="2531" fg:w="8"/><text x="12.3606%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.03%)</title><rect x="12.1154%" y="165" width="0.0335%" height="15" fill="rgb(253,215,40)" fg:x="2532" fg:w="7"/><text x="12.3654%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.03%)</title><rect x="12.1154%" y="149" width="0.0335%" height="15" fill="rgb(211,81,21)" fg:x="2532" fg:w="7"/><text x="12.3654%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.02%)</title><rect x="12.1250%" y="133" width="0.0239%" height="15" fill="rgb(208,190,38)" fg:x="2534" fg:w="5"/><text x="12.3750%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (26 samples, 0.12%)</title><rect x="12.1585%" y="181" width="0.1244%" height="15" fill="rgb(235,213,38)" fg:x="2541" fg:w="26"/><text x="12.4085%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="12.2829%" y="181" width="0.0144%" height="15" fill="rgb(237,122,38)" fg:x="2567" fg:w="3"/><text x="12.5329%" y="191.50"></text></g><g><title>csv_sql`alloc::sync::Arc&lt;T&gt;::drop_slow (34 samples, 0.16%)</title><rect x="12.1585%" y="197" width="0.1627%" height="15" fill="rgb(244,218,35)" fg:x="2541" fg:w="34"/><text x="12.4085%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (5 samples, 0.02%)</title><rect x="12.2972%" y="181" width="0.0239%" height="15" fill="rgb(240,68,47)" fg:x="2570" fg:w="5"/><text x="12.5472%" y="191.50"></text></g><g><title>csv_sql`alloc::sync::Arc&lt;T&gt;::drop_slow (40 samples, 0.19%)</title><rect x="12.1489%" y="229" width="0.1914%" height="15" fill="rgb(210,16,53)" fg:x="2539" fg:w="40"/><text x="12.3989%" y="239.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::Int32Type&gt;&gt; (38 samples, 0.18%)</title><rect x="12.1585%" y="213" width="0.1818%" height="15" fill="rgb(235,124,12)" fg:x="2541" fg:w="38"/><text x="12.4085%" y="223.50"></text></g><g><title>csv_sql`&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt; as arrow_array::array::Array&gt;::to_data (5 samples, 0.02%)</title><rect x="12.3642%" y="213" width="0.0239%" height="15" fill="rgb(224,169,11)" fg:x="2584" fg:w="5"/><text x="12.6142%" y="223.50"></text></g><g><title>csv_sql`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (5 samples, 0.02%)</title><rect x="12.3642%" y="197" width="0.0239%" height="15" fill="rgb(250,166,2)" fg:x="2584" fg:w="5"/><text x="12.6142%" y="207.50"></text></g><g><title>csv_sql`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (5 samples, 0.02%)</title><rect x="12.4073%" y="197" width="0.0239%" height="15" fill="rgb(242,216,29)" fg:x="2593" fg:w="5"/><text x="12.6573%" y="207.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (7 samples, 0.03%)</title><rect x="12.4312%" y="197" width="0.0335%" height="15" fill="rgb(230,116,27)" fg:x="2598" fg:w="7"/><text x="12.6812%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.03%)</title><rect x="12.4360%" y="181" width="0.0287%" height="15" fill="rgb(228,99,48)" fg:x="2599" fg:w="6"/><text x="12.6860%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.03%)</title><rect x="12.4360%" y="165" width="0.0287%" height="15" fill="rgb(253,11,6)" fg:x="2599" fg:w="6"/><text x="12.6860%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.01%)</title><rect x="12.4695%" y="197" width="0.0144%" height="15" fill="rgb(247,143,39)" fg:x="2606" fg:w="3"/><text x="12.7195%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (3 samples, 0.01%)</title><rect x="12.4695%" y="181" width="0.0144%" height="15" fill="rgb(236,97,10)" fg:x="2606" fg:w="3"/><text x="12.7195%" y="191.50"></text></g><g><title>csv_sql`arrow_array::array::make_array (19 samples, 0.09%)</title><rect x="12.3977%" y="213" width="0.0909%" height="15" fill="rgb(233,208,19)" fg:x="2591" fg:w="19"/><text x="12.6477%" y="223.50"></text></g><g><title>csv_sql`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (4 samples, 0.02%)</title><rect x="12.4982%" y="197" width="0.0191%" height="15" fill="rgb(216,164,2)" fg:x="2612" fg:w="4"/><text x="12.7482%" y="207.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;arrow_schema::datatype::DataType&gt; (3 samples, 0.01%)</title><rect x="12.5030%" y="181" width="0.0144%" height="15" fill="rgb(220,129,5)" fg:x="2613" fg:w="3"/><text x="12.7530%" y="191.50"></text></g><g><title>csv_sql`arrow_array::array::primitive_array::_&lt;impl core::convert::From&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (4 samples, 0.02%)</title><rect x="12.5173%" y="197" width="0.0191%" height="15" fill="rgb(242,17,10)" fg:x="2616" fg:w="4"/><text x="12.7673%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.01%)</title><rect x="12.5221%" y="181" width="0.0144%" height="15" fill="rgb(242,107,0)" fg:x="2617" fg:w="3"/><text x="12.7721%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (3 samples, 0.01%)</title><rect x="12.5221%" y="165" width="0.0144%" height="15" fill="rgb(251,28,31)" fg:x="2617" fg:w="3"/><text x="12.7721%" y="175.50"></text></g><g><title>csv_sql`arrow_cast::cast::cast_reinterpret_arrays (15 samples, 0.07%)</title><rect x="12.4886%" y="213" width="0.0718%" height="15" fill="rgb(233,223,10)" fg:x="2610" fg:w="15"/><text x="12.7386%" y="223.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (5 samples, 0.02%)</title><rect x="12.5365%" y="197" width="0.0239%" height="15" fill="rgb(215,21,27)" fg:x="2620" fg:w="5"/><text x="12.7865%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.02%)</title><rect x="12.5413%" y="181" width="0.0191%" height="15" fill="rgb(232,23,21)" fg:x="2621" fg:w="4"/><text x="12.7913%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.01%)</title><rect x="12.5461%" y="165" width="0.0144%" height="15" fill="rgb(244,5,23)" fg:x="2622" fg:w="3"/><text x="12.7961%" y="175.50"></text></g><g><title>csv_sql`arrow_cast::cast::cast_with_options (47 samples, 0.22%)</title><rect x="12.3451%" y="229" width="0.2249%" height="15" fill="rgb(226,81,46)" fg:x="2580" fg:w="47"/><text x="12.5951%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.02%)</title><rect x="12.5987%" y="197" width="0.0239%" height="15" fill="rgb(247,70,30)" fg:x="2633" fg:w="5"/><text x="12.8487%" y="207.50"></text></g><g><title>csv_sql`alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.03%)</title><rect x="12.5987%" y="213" width="0.0287%" height="15" fill="rgb(212,68,19)" fg:x="2633" fg:w="6"/><text x="12.8487%" y="223.50"></text></g><g><title>csv_sql`arrow_data::data::ArrayDataBuilder::build_impl (17 samples, 0.08%)</title><rect x="12.5700%" y="229" width="0.0813%" height="15" fill="rgb(240,187,13)" fg:x="2627" fg:w="17"/><text x="12.8200%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.01%)</title><rect x="12.6370%" y="213" width="0.0144%" height="15" fill="rgb(223,113,26)" fg:x="2641" fg:w="3"/><text x="12.8870%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.01%)</title><rect x="12.6370%" y="197" width="0.0144%" height="15" fill="rgb(206,192,2)" fg:x="2641" fg:w="3"/><text x="12.8870%" y="207.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (3 samples, 0.01%)</title><rect x="12.6752%" y="213" width="0.0144%" height="15" fill="rgb(241,108,4)" fg:x="2649" fg:w="3"/><text x="12.9252%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.05%)</title><rect x="12.6944%" y="213" width="0.0478%" height="15" fill="rgb(247,173,49)" fg:x="2653" fg:w="10"/><text x="12.9444%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.03%)</title><rect x="12.7087%" y="197" width="0.0335%" height="15" fill="rgb(224,114,35)" fg:x="2656" fg:w="7"/><text x="12.9587%" y="207.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (15 samples, 0.07%)</title><rect x="12.6752%" y="229" width="0.0718%" height="15" fill="rgb(245,159,27)" fg:x="2649" fg:w="15"/><text x="12.9252%" y="239.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;arrow_schema::datatype::DataType&gt; (4 samples, 0.02%)</title><rect x="12.7470%" y="229" width="0.0191%" height="15" fill="rgb(245,172,44)" fg:x="2664" fg:w="4"/><text x="12.9970%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="12.7662%" y="229" width="0.0144%" height="15" fill="rgb(236,23,11)" fg:x="2668" fg:w="3"/><text x="13.0162%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.01%)</title><rect x="12.7805%" y="229" width="0.0144%" height="15" fill="rgb(205,117,38)" fg:x="2671" fg:w="3"/><text x="13.0305%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.01%)</title><rect x="12.7805%" y="213" width="0.0144%" height="15" fill="rgb(237,72,25)" fg:x="2671" fg:w="3"/><text x="13.0305%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.01%)</title><rect x="12.7805%" y="197" width="0.0144%" height="15" fill="rgb(244,70,9)" fg:x="2671" fg:w="3"/><text x="13.0305%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.01%)</title><rect x="12.8714%" y="165" width="0.0144%" height="15" fill="rgb(217,125,39)" fg:x="2690" fg:w="3"/><text x="13.1214%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (30 samples, 0.14%)</title><rect x="12.7949%" y="229" width="0.1435%" height="15" fill="rgb(235,36,10)" fg:x="2674" fg:w="30"/><text x="13.0449%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (30 samples, 0.14%)</title><rect x="12.7949%" y="213" width="0.1435%" height="15" fill="rgb(251,123,47)" fg:x="2674" fg:w="30"/><text x="13.0449%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 0.13%)</title><rect x="12.8092%" y="197" width="0.1292%" height="15" fill="rgb(221,13,13)" fg:x="2677" fg:w="27"/><text x="13.0592%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (25 samples, 0.12%)</title><rect x="12.8188%" y="181" width="0.1196%" height="15" fill="rgb(238,131,9)" fg:x="2679" fg:w="25"/><text x="13.0688%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.05%)</title><rect x="12.8858%" y="165" width="0.0526%" height="15" fill="rgb(211,50,8)" fg:x="2693" fg:w="11"/><text x="13.1358%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (64 samples, 0.31%)</title><rect x="12.9767%" y="149" width="0.3062%" height="15" fill="rgb(245,182,24)" fg:x="2712" fg:w="64"/><text x="13.2267%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (73 samples, 0.35%)</title><rect x="12.9432%" y="181" width="0.3493%" height="15" fill="rgb(242,14,37)" fg:x="2705" fg:w="73"/><text x="13.1932%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (67 samples, 0.32%)</title><rect x="12.9719%" y="165" width="0.3206%" height="15" fill="rgb(246,228,12)" fg:x="2711" fg:w="67"/><text x="13.2219%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (78 samples, 0.37%)</title><rect x="12.9384%" y="229" width="0.3732%" height="15" fill="rgb(213,55,15)" fg:x="2704" fg:w="78"/><text x="13.1884%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_memalign (77 samples, 0.37%)</title><rect x="12.9432%" y="213" width="0.3684%" height="15" fill="rgb(209,9,3)" fg:x="2705" fg:w="77"/><text x="13.1932%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (77 samples, 0.37%)</title><rect x="12.9432%" y="197" width="0.3684%" height="15" fill="rgb(230,59,30)" fg:x="2705" fg:w="77"/><text x="13.1932%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.02%)</title><rect x="13.2925%" y="181" width="0.0191%" height="15" fill="rgb(209,121,21)" fg:x="2778" fg:w="4"/><text x="13.5425%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (4 samples, 0.02%)</title><rect x="13.2925%" y="165" width="0.0191%" height="15" fill="rgb(220,109,13)" fg:x="2778" fg:w="4"/><text x="13.5425%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (43 samples, 0.21%)</title><rect x="13.3116%" y="229" width="0.2058%" height="15" fill="rgb(232,18,1)" fg:x="2782" fg:w="43"/><text x="13.5616%" y="239.50"></text></g><g><title>csv_sql`&lt;parquet::arrow::array_reader::primitive_array::PrimitiveArrayReader&lt;T&gt; as parquet::arrow::array_reader::ArrayReader&gt;::consume_batch (2,610 samples, 12.49%)</title><rect x="1.0479%" y="245" width="12.4886%" height="15" fill="rgb(215,41,42)" fg:x="219" fg:w="2610"/><text x="1.2979%" y="255.50">csv_sql`&lt;parquet::a..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="13.5174%" y="229" width="0.0191%" height="15" fill="rgb(224,123,36)" fg:x="2825" fg:w="4"/><text x="13.7674%" y="239.50"></text></g><g><title>csv_sql`DYLD-STUB$$__bzero (7 samples, 0.03%)</title><rect x="13.5365%" y="245" width="0.0335%" height="15" fill="rgb(240,125,3)" fg:x="2829" fg:w="7"/><text x="13.7865%" y="255.50"></text></g><g><title>csv_sql`alloc::raw_vec::finish_grow (4 samples, 0.02%)</title><rect x="13.5748%" y="229" width="0.0191%" height="15" fill="rgb(205,98,50)" fg:x="2837" fg:w="4"/><text x="13.8248%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.02%)</title><rect x="13.5748%" y="213" width="0.0191%" height="15" fill="rgb(205,185,37)" fg:x="2837" fg:w="4"/><text x="13.8248%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.02%)</title><rect x="13.5748%" y="197" width="0.0191%" height="15" fill="rgb(238,207,15)" fg:x="2837" fg:w="4"/><text x="13.8248%" y="207.50"></text></g><g><title>csv_sql`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.03%)</title><rect x="13.5700%" y="245" width="0.0287%" height="15" fill="rgb(213,199,42)" fg:x="2836" fg:w="6"/><text x="13.8200%" y="255.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (16 samples, 0.08%)</title><rect x="13.6179%" y="245" width="0.0766%" height="15" fill="rgb(235,201,11)" fg:x="2846" fg:w="16"/><text x="13.8679%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.05%)</title><rect x="13.6466%" y="229" width="0.0478%" height="15" fill="rgb(207,46,11)" fg:x="2852" fg:w="10"/><text x="13.8966%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.03%)</title><rect x="13.6609%" y="213" width="0.0335%" height="15" fill="rgb(241,35,35)" fg:x="2855" fg:w="7"/><text x="13.9109%" y="223.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (6 samples, 0.03%)</title><rect x="13.7040%" y="213" width="0.0287%" height="15" fill="rgb(243,32,47)" fg:x="2864" fg:w="6"/><text x="13.9540%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.03%)</title><rect x="13.7471%" y="213" width="0.0287%" height="15" fill="rgb(247,202,23)" fg:x="2873" fg:w="6"/><text x="13.9971%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.02%)</title><rect x="13.7566%" y="197" width="0.0191%" height="15" fill="rgb(219,102,11)" fg:x="2875" fg:w="4"/><text x="14.0066%" y="207.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (17 samples, 0.08%)</title><rect x="13.6992%" y="229" width="0.0813%" height="15" fill="rgb(243,110,44)" fg:x="2863" fg:w="17"/><text x="13.9492%" y="239.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (19 samples, 0.09%)</title><rect x="13.6944%" y="245" width="0.0909%" height="15" fill="rgb(222,74,54)" fg:x="2862" fg:w="19"/><text x="13.9444%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.02%)</title><rect x="13.7949%" y="245" width="0.0239%" height="15" fill="rgb(216,99,12)" fg:x="2883" fg:w="5"/><text x="14.0449%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (4 samples, 0.02%)</title><rect x="13.7997%" y="229" width="0.0191%" height="15" fill="rgb(226,22,26)" fg:x="2884" fg:w="4"/><text x="14.0497%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="13.8045%" y="213" width="0.0144%" height="15" fill="rgb(217,163,10)" fg:x="2885" fg:w="3"/><text x="14.0545%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.01%)</title><rect x="13.8045%" y="197" width="0.0144%" height="15" fill="rgb(213,25,53)" fg:x="2885" fg:w="3"/><text x="14.0545%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (29 samples, 0.14%)</title><rect x="13.8188%" y="245" width="0.1388%" height="15" fill="rgb(252,105,26)" fg:x="2888" fg:w="29"/><text x="14.0688%" y="255.50"></text></g><g><title>csv_sql`&lt;parquet::arrow::array_reader::struct_array::StructArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::consume_batch (2,827 samples, 13.53%)</title><rect x="0.4498%" y="261" width="13.5270%" height="15" fill="rgb(220,39,43)" fg:x="94" fg:w="2827"/><text x="0.6998%" y="271.50">csv_sql`&lt;parquet::ar..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="13.9576%" y="245" width="0.0191%" height="15" fill="rgb(229,68,48)" fg:x="2917" fg:w="4"/><text x="14.2076%" y="255.50"></text></g><g><title>csv_sql`DYLD-STUB$$memcpy (37 samples, 0.18%)</title><rect x="17.0247%" y="197" width="0.1770%" height="15" fill="rgb(252,8,32)" fg:x="3558" fg:w="37"/><text x="17.2747%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.03%)</title><rect x="22.6040%" y="165" width="0.0287%" height="15" fill="rgb(223,20,43)" fg:x="4724" fg:w="6"/><text x="22.8540%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (10 samples, 0.05%)</title><rect x="22.6853%" y="149" width="0.0478%" height="15" fill="rgb(229,81,49)" fg:x="4741" fg:w="10"/><text x="22.9353%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.05%)</title><rect x="22.7331%" y="149" width="0.0478%" height="15" fill="rgb(236,28,36)" fg:x="4751" fg:w="10"/><text x="22.9831%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.04%)</title><rect x="22.7427%" y="133" width="0.0383%" height="15" fill="rgb(249,185,26)" fg:x="4753" fg:w="8"/><text x="22.9927%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (33 samples, 0.16%)</title><rect x="22.6327%" y="165" width="0.1579%" height="15" fill="rgb(249,174,33)" fg:x="4730" fg:w="33"/><text x="22.8827%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.02%)</title><rect x="22.8432%" y="149" width="0.0239%" height="15" fill="rgb(233,201,37)" fg:x="4774" fg:w="5"/><text x="23.0932%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (15 samples, 0.07%)</title><rect x="22.8001%" y="165" width="0.0718%" height="15" fill="rgb(221,78,26)" fg:x="4765" fg:w="15"/><text x="23.0501%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (20 samples, 0.10%)</title><rect x="22.8719%" y="165" width="0.0957%" height="15" fill="rgb(250,127,30)" fg:x="4780" fg:w="20"/><text x="23.1219%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 0.07%)</title><rect x="22.8958%" y="149" width="0.0718%" height="15" fill="rgb(230,49,44)" fg:x="4785" fg:w="15"/><text x="23.1458%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4 samples, 0.02%)</title><rect x="22.9485%" y="133" width="0.0191%" height="15" fill="rgb(229,67,23)" fg:x="4796" fg:w="4"/><text x="23.1985%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_memalign (3 samples, 0.01%)</title><rect x="23.0202%" y="133" width="0.0144%" height="15" fill="rgb(249,83,47)" fg:x="4811" fg:w="3"/><text x="23.2702%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.02%)</title><rect x="23.0346%" y="133" width="0.0191%" height="15" fill="rgb(215,43,3)" fg:x="4814" fg:w="4"/><text x="23.2846%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`large_entries_grow_no_lock (6 samples, 0.03%)</title><rect x="23.1255%" y="101" width="0.0287%" height="15" fill="rgb(238,154,13)" fg:x="4833" fg:w="6"/><text x="23.3755%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (67 samples, 0.32%)</title><rect x="23.1590%" y="85" width="0.3206%" height="15" fill="rgb(219,56,2)" fg:x="4840" fg:w="67"/><text x="23.4090%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (69 samples, 0.33%)</title><rect x="23.1542%" y="101" width="0.3302%" height="15" fill="rgb(233,0,4)" fg:x="4839" fg:w="69"/><text x="23.4042%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (88 samples, 0.42%)</title><rect x="23.0729%" y="117" width="0.4211%" height="15" fill="rgb(235,30,7)" fg:x="4822" fg:w="88"/><text x="23.3229%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (4 samples, 0.02%)</title><rect x="23.6566%" y="85" width="0.0191%" height="15" fill="rgb(250,79,13)" fg:x="4944" fg:w="4"/><text x="23.9066%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (3 samples, 0.01%)</title><rect x="23.6758%" y="85" width="0.0144%" height="15" fill="rgb(211,146,34)" fg:x="4948" fg:w="3"/><text x="23.9258%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (145 samples, 0.69%)</title><rect x="23.0585%" y="133" width="0.6938%" height="15" fill="rgb(228,22,38)" fg:x="4819" fg:w="145"/><text x="23.3085%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (54 samples, 0.26%)</title><rect x="23.4939%" y="117" width="0.2584%" height="15" fill="rgb(235,168,5)" fg:x="4910" fg:w="54"/><text x="23.7439%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (39 samples, 0.19%)</title><rect x="23.5657%" y="101" width="0.1866%" height="15" fill="rgb(221,155,16)" fg:x="4925" fg:w="39"/><text x="23.8157%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (13 samples, 0.06%)</title><rect x="23.6901%" y="85" width="0.0622%" height="15" fill="rgb(215,215,53)" fg:x="4951" fg:w="13"/><text x="23.9401%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.02%)</title><rect x="23.8672%" y="85" width="0.0191%" height="15" fill="rgb(223,4,10)" fg:x="4988" fg:w="4"/><text x="24.1172%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (23 samples, 0.11%)</title><rect x="23.7810%" y="117" width="0.1101%" height="15" fill="rgb(234,103,6)" fg:x="4970" fg:w="23"/><text x="24.0310%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17 samples, 0.08%)</title><rect x="23.8098%" y="101" width="0.0813%" height="15" fill="rgb(227,97,0)" fg:x="4976" fg:w="17"/><text x="24.0598%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.01%)</title><rect x="23.9533%" y="101" width="0.0144%" height="15" fill="rgb(234,150,53)" fg:x="5006" fg:w="3"/><text x="24.2033%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_memalign (211 samples, 1.01%)</title><rect x="22.9963%" y="149" width="1.0096%" height="15" fill="rgb(228,201,54)" fg:x="4806" fg:w="211"/><text x="23.2463%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (53 samples, 0.25%)</title><rect x="23.7523%" y="133" width="0.2536%" height="15" fill="rgb(222,22,37)" fg:x="4964" fg:w="53"/><text x="24.0023%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (24 samples, 0.11%)</title><rect x="23.8911%" y="117" width="0.1148%" height="15" fill="rgb(237,53,32)" fg:x="4993" fg:w="24"/><text x="24.1411%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.04%)</title><rect x="23.9677%" y="101" width="0.0383%" height="15" fill="rgb(233,25,53)" fg:x="5009" fg:w="8"/><text x="24.2177%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.02%)</title><rect x="23.9868%" y="85" width="0.0191%" height="15" fill="rgb(210,40,34)" fg:x="5013" fg:w="4"/><text x="24.2368%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (218 samples, 1.04%)</title><rect x="22.9772%" y="165" width="1.0431%" height="15" fill="rgb(241,220,44)" fg:x="4802" fg:w="218"/><text x="23.2272%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.02%)</title><rect x="24.0251%" y="165" width="0.0239%" height="15" fill="rgb(235,28,35)" fg:x="5021" fg:w="5"/><text x="24.2751%" y="175.50"></text></g><g><title>csv_sql`arrow_buffer::buffer::mutable::MutableBuffer::reallocate (1,341 samples, 6.42%)</title><rect x="22.5752%" y="181" width="6.4166%" height="15" fill="rgb(210,56,17)" fg:x="4718" fg:w="1341"/><text x="22.8252%" y="191.50">csv_sql`..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,033 samples, 4.94%)</title><rect x="24.0490%" y="165" width="4.9428%" height="15" fill="rgb(224,130,29)" fg:x="5026" fg:w="1033"/><text x="24.2990%" y="175.50">libsys..</text></g><g><title>csv_sql`parquet::arrow::buffer::offset_buffer::OffsetBuffer&lt;I&gt;::try_push (3,667 samples, 17.55%)</title><rect x="17.2113%" y="197" width="17.5463%" height="15" fill="rgb(235,212,8)" fg:x="3597" fg:w="3667"/><text x="17.4613%" y="207.50">csv_sql`parquet::arrow::buf..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,201 samples, 5.75%)</title><rect x="29.0110%" y="181" width="5.7467%" height="15" fill="rgb(223,33,50)" fg:x="6063" fg:w="1201"/><text x="29.2610%" y="191.50">libsyst..</text></g><g><title>csv_sql`parquet::arrow::buffer::offset_buffer::OffsetBuffer&lt;I&gt;::extend_from_dictionary (4,500 samples, 21.53%)</title><rect x="14.0198%" y="213" width="21.5321%" height="15" fill="rgb(219,149,13)" fg:x="2930" fg:w="4500"/><text x="14.2698%" y="223.50">csv_sql`parquet::arrow::buffer::of..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (166 samples, 0.79%)</title><rect x="34.7576%" y="197" width="0.7943%" height="15" fill="rgb(250,156,29)" fg:x="7264" fg:w="166"/><text x="35.0076%" y="207.50"></text></g><g><title>csv_sql`parquet::arrow::buffer::offset_buffer::OffsetBuffer&lt;I&gt;::try_push (92 samples, 0.44%)</title><rect x="35.5519%" y="213" width="0.4402%" height="15" fill="rgb(216,193,19)" fg:x="7430" fg:w="92"/><text x="35.8019%" y="223.50"></text></g><g><title>csv_sql`parquet::util::bit_util::BitReader::get_vlq_int (20 samples, 0.10%)</title><rect x="36.3654%" y="181" width="0.0957%" height="15" fill="rgb(216,135,14)" fg:x="7600" fg:w="20"/><text x="36.6154%" y="191.50"></text></g><g><title>csv_sql`parquet::encodings::rle::RleDecoder::reload (59 samples, 0.28%)</title><rect x="36.2075%" y="197" width="0.2823%" height="15" fill="rgb(241,47,5)" fg:x="7567" fg:w="59"/><text x="36.4575%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.03%)</title><rect x="36.4611%" y="181" width="0.0287%" height="15" fill="rgb(233,42,35)" fg:x="7620" fg:w="6"/><text x="36.7111%" y="191.50"></text></g><g><title>csv_sql`parquet::util::bit_pack::unpack32 (5 samples, 0.02%)</title><rect x="36.4946%" y="197" width="0.0239%" height="15" fill="rgb(231,13,6)" fg:x="7627" fg:w="5"/><text x="36.7446%" y="207.50"></text></g><g><title>csv_sql`parquet::util::bit_pack::unpack16 (19 samples, 0.09%)</title><rect x="36.9252%" y="181" width="0.0909%" height="15" fill="rgb(207,181,40)" fg:x="7717" fg:w="19"/><text x="37.1752%" y="191.50"></text></g><g><title>csv_sql`parquet::util::bit_pack::unpack32 (59 samples, 0.28%)</title><rect x="37.0161%" y="181" width="0.2823%" height="15" fill="rgb(254,173,49)" fg:x="7736" fg:w="59"/><text x="37.2661%" y="191.50"></text></g><g><title>csv_sql`parquet::util::bit_pack::unpack8 (6 samples, 0.03%)</title><rect x="37.2984%" y="181" width="0.0287%" height="15" fill="rgb(221,1,38)" fg:x="7795" fg:w="6"/><text x="37.5484%" y="191.50"></text></g><g><title>csv_sql`parquet::util::bit_util::BitReader::get_batch (178 samples, 0.85%)</title><rect x="36.5233%" y="197" width="0.8517%" height="15" fill="rgb(206,124,46)" fg:x="7633" fg:w="178"/><text x="36.7733%" y="207.50"></text></g><g><title>csv_sql`parquet::util::bit_util::BitReader::get_value (10 samples, 0.05%)</title><rect x="37.3271%" y="181" width="0.0478%" height="15" fill="rgb(249,21,11)" fg:x="7801" fg:w="10"/><text x="37.5771%" y="191.50"></text></g><g><title>csv_sql`parquet::encodings::rle::RleDecoder::get_batch (294 samples, 1.41%)</title><rect x="35.9922%" y="213" width="1.4068%" height="15" fill="rgb(222,201,40)" fg:x="7522" fg:w="294"/><text x="36.2422%" y="223.50"></text></g><g><title>csv_sql`parquet::util::bit_util::BitReader::get_vlq_int (3 samples, 0.01%)</title><rect x="37.3846%" y="197" width="0.0144%" height="15" fill="rgb(235,61,29)" fg:x="7813" fg:w="3"/><text x="37.6346%" y="207.50"></text></g><g><title>csv_sql`parquet::arrow::array_reader::byte_array::ByteArrayDecoder::read (4,891 samples, 23.40%)</title><rect x="14.0102%" y="229" width="23.4030%" height="15" fill="rgb(219,207,3)" fg:x="2928" fg:w="4891"/><text x="14.2602%" y="239.50">csv_sql`parquet::arrow::array_reader:..</text></g><g><title>csv_sql`parquet::encodings::rle::RleDecoder::reload (3 samples, 0.01%)</title><rect x="37.3989%" y="213" width="0.0144%" height="15" fill="rgb(222,56,46)" fg:x="7816" fg:w="3"/><text x="37.6489%" y="223.50"></text></g><g><title>csv_sql`DYLD-STUB$$memcpy (13 samples, 0.06%)</title><rect x="38.2985%" y="213" width="0.0622%" height="15" fill="rgb(239,76,54)" fg:x="8004" fg:w="13"/><text x="38.5485%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`large_entries_grow_no_lock (20 samples, 0.10%)</title><rect x="38.3990%" y="133" width="0.0957%" height="15" fill="rgb(231,124,27)" fg:x="8025" fg:w="20"/><text x="38.6490%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (49 samples, 0.23%)</title><rect x="38.3798%" y="149" width="0.2345%" height="15" fill="rgb(249,195,6)" fg:x="8021" fg:w="49"/><text x="38.6298%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (25 samples, 0.12%)</title><rect x="38.4947%" y="133" width="0.1196%" height="15" fill="rgb(237,174,47)" fg:x="8045" fg:w="25"/><text x="38.7447%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (25 samples, 0.12%)</title><rect x="38.4947%" y="117" width="0.1196%" height="15" fill="rgb(206,201,31)" fg:x="8045" fg:w="25"/><text x="38.7447%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (53 samples, 0.25%)</title><rect x="38.3703%" y="197" width="0.2536%" height="15" fill="rgb(231,57,52)" fg:x="8019" fg:w="53"/><text x="38.6203%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_memalign (52 samples, 0.25%)</title><rect x="38.3750%" y="181" width="0.2488%" height="15" fill="rgb(248,177,22)" fg:x="8020" fg:w="52"/><text x="38.6250%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (51 samples, 0.24%)</title><rect x="38.3798%" y="165" width="0.2440%" height="15" fill="rgb(215,211,37)" fg:x="8021" fg:w="51"/><text x="38.6298%" y="175.50"></text></g><g><title>csv_sql`arrow_buffer::buffer::mutable::MutableBuffer::reallocate (118 samples, 0.56%)</title><rect x="38.3607%" y="213" width="0.5646%" height="15" fill="rgb(241,128,51)" fg:x="8017" fg:w="118"/><text x="38.6107%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (63 samples, 0.30%)</title><rect x="38.6239%" y="197" width="0.3014%" height="15" fill="rgb(227,165,31)" fg:x="8072" fg:w="63"/><text x="38.8739%" y="207.50"></text></g><g><title>csv_sql`core::str::converts::from_utf8 (81 samples, 0.39%)</title><rect x="38.9253%" y="213" width="0.3876%" height="15" fill="rgb(228,167,24)" fg:x="8135" fg:w="81"/><text x="39.1753%" y="223.50"></text></g><g><title>csv_sql`parquet::arrow::buffer::offset_buffer::OffsetBuffer&lt;I&gt;::try_push (1,083 samples, 5.18%)</title><rect x="39.3129%" y="213" width="5.1821%" height="15" fill="rgb(228,143,12)" fg:x="8216" fg:w="1083"/><text x="39.5629%" y="223.50">csv_sq..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (758 samples, 3.63%)</title><rect x="40.8680%" y="197" width="3.6270%" height="15" fill="rgb(249,149,8)" fg:x="8541" fg:w="758"/><text x="41.1180%" y="207.50">libs..</text></g><g><title>csv_sql`parquet::arrow::array_reader::byte_array::ByteArrayDecoderPlain::read (1,520 samples, 7.27%)</title><rect x="37.4133%" y="229" width="7.2731%" height="15" fill="rgb(243,35,44)" fg:x="7819" fg:w="1520"/><text x="37.6633%" y="239.50">csv_sql`pa..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (40 samples, 0.19%)</title><rect x="44.4950%" y="213" width="0.1914%" height="15" fill="rgb(246,89,9)" fg:x="9299" fg:w="40"/><text x="44.7450%" y="223.50"></text></g><g><title>csv_sql`parquet::arrow::buffer::offset_buffer::OffsetBuffer&lt;I&gt;::try_push (27 samples, 0.13%)</title><rect x="44.6863%" y="229" width="0.1292%" height="15" fill="rgb(233,213,13)" fg:x="9339" fg:w="27"/><text x="44.9363%" y="239.50"></text></g><g><title>csv_sql`parquet::arrow::buffer::offset_buffer::OffsetBuffer&lt;I&gt;::try_push (38 samples, 0.18%)</title><rect x="44.8682%" y="181" width="0.1818%" height="15" fill="rgb(233,141,41)" fg:x="9377" fg:w="38"/><text x="45.1182%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (29 samples, 0.14%)</title><rect x="44.9112%" y="165" width="0.1388%" height="15" fill="rgb(239,167,4)" fg:x="9386" fg:w="29"/><text x="45.1612%" y="175.50"></text></g><g><title>csv_sql`parquet::arrow::array_reader::byte_array::ByteArrayDecoderPlain::read (52 samples, 0.25%)</title><rect x="44.8203%" y="197" width="0.2488%" height="15" fill="rgb(209,217,16)" fg:x="9367" fg:w="52"/><text x="45.0703%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="45.0500%" y="181" width="0.0191%" height="15" fill="rgb(219,88,35)" fg:x="9415" fg:w="4"/><text x="45.3000%" y="191.50"></text></g><g><title>csv_sql`&lt;parquet::arrow::array_reader::byte_array::ByteArrayColumnValueDecoder&lt;I&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::set_dict (55 samples, 0.26%)</title><rect x="44.8155%" y="213" width="0.2632%" height="15" fill="rgb(220,193,23)" fg:x="9366" fg:w="55"/><text x="45.0655%" y="223.50"></text></g><g><title>csv_sql`ZSTD_decompressBegin_usingDDict (13 samples, 0.06%)</title><rect x="45.1840%" y="149" width="0.0622%" height="15" fill="rgb(230,90,52)" fg:x="9443" fg:w="13"/><text x="45.4340%" y="159.50"></text></g><g><title>csv_sql`HUF_decompress4X2_usingDTable_internal (13 samples, 0.06%)</title><rect x="45.2701%" y="85" width="0.0622%" height="15" fill="rgb(252,106,19)" fg:x="9461" fg:w="13"/><text x="45.5201%" y="95.50"></text></g><g><title>csv_sql`HUF_decompress4X2_usingDTable_internal_fast (13 samples, 0.06%)</title><rect x="45.2701%" y="69" width="0.0622%" height="15" fill="rgb(206,74,20)" fg:x="9461" fg:w="13"/><text x="45.5201%" y="79.50"></text></g><g><title>csv_sql`HUF_fillDTableX2ForWeight (5 samples, 0.02%)</title><rect x="45.3754%" y="53" width="0.0239%" height="15" fill="rgb(230,138,44)" fg:x="9483" fg:w="5"/><text x="45.6254%" y="63.50"></text></g><g><title>csv_sql`HUF_readDTableX2_wksp (14 samples, 0.07%)</title><rect x="45.3371%" y="69" width="0.0670%" height="15" fill="rgb(235,182,43)" fg:x="9475" fg:w="14"/><text x="45.5871%" y="79.50"></text></g><g><title>csv_sql`HUF_decompress4X_hufOnly_wksp (16 samples, 0.08%)</title><rect x="45.3323%" y="85" width="0.0766%" height="15" fill="rgb(242,16,51)" fg:x="9474" fg:w="16"/><text x="45.5823%" y="95.50"></text></g><g><title>csv_sql`ZSTD_decodeLiteralsBlock (31 samples, 0.15%)</title><rect x="45.2653%" y="101" width="0.1483%" height="15" fill="rgb(248,9,4)" fg:x="9460" fg:w="31"/><text x="45.5153%" y="111.50"></text></g><g><title>csv_sql`FSE_readNCount (5 samples, 0.02%)</title><rect x="45.4232%" y="69" width="0.0239%" height="15" fill="rgb(210,31,22)" fg:x="9493" fg:w="5"/><text x="45.6732%" y="79.50"></text></g><g><title>csv_sql`ZSTD_decodeSeqHeaders (74 samples, 0.35%)</title><rect x="45.4137%" y="101" width="0.3541%" height="15" fill="rgb(239,54,39)" fg:x="9491" fg:w="74"/><text x="45.6637%" y="111.50"></text></g><g><title>csv_sql`ZSTD_buildSeqTable (73 samples, 0.35%)</title><rect x="45.4184%" y="85" width="0.3493%" height="15" fill="rgb(230,99,41)" fg:x="9492" fg:w="73"/><text x="45.6684%" y="95.50"></text></g><g><title>csv_sql`ZSTD_buildFSETable_body_bmi2 (67 samples, 0.32%)</title><rect x="45.4472%" y="69" width="0.3206%" height="15" fill="rgb(253,106,12)" fg:x="9498" fg:w="67"/><text x="45.6972%" y="79.50"></text></g><g><title>csv_sql`ZSTD_decompressSequences_bmi2 (2,441 samples, 11.68%)</title><rect x="45.7677%" y="101" width="11.6800%" height="15" fill="rgb(213,46,41)" fg:x="9565" fg:w="2441"/><text x="46.0177%" y="111.50">csv_sql`ZSTD_deco..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (30 samples, 0.14%)</title><rect x="57.3042%" y="85" width="0.1435%" height="15" fill="rgb(215,133,35)" fg:x="11976" fg:w="30"/><text x="57.5542%" y="95.50"></text></g><g><title>csv_sql`ZSTD_decompressBlock_internal (2,549 samples, 12.20%)</title><rect x="45.2558%" y="117" width="12.1968%" height="15" fill="rgb(213,28,5)" fg:x="9458" fg:w="2549"/><text x="45.5058%" y="127.50">csv_sql`ZSTD_decom..</text></g><g><title>csv_sql`ZSTD_decompressContinueStream (2,552 samples, 12.21%)</title><rect x="45.2462%" y="149" width="12.2111%" height="15" fill="rgb(215,77,49)" fg:x="9456" fg:w="2552"/><text x="45.4962%" y="159.50">csv_sql`ZSTD_decom..</text></g><g><title>csv_sql`ZSTD_decompressContinue (2,551 samples, 12.21%)</title><rect x="45.2510%" y="133" width="12.2063%" height="15" fill="rgb(248,100,22)" fg:x="9457" fg:w="2551"/><text x="45.5010%" y="143.50">csv_sql`ZSTD_decom..</text></g><g><title>csv_sql`ZSTD_decompressStream (2,623 samples, 12.55%)</title><rect x="45.1313%" y="165" width="12.5508%" height="15" fill="rgb(208,67,9)" fg:x="9432" fg:w="2623"/><text x="45.3813%" y="175.50">csv_sql`ZSTD_decomp..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (47 samples, 0.22%)</title><rect x="57.4573%" y="149" width="0.2249%" height="15" fill="rgb(219,133,21)" fg:x="12008" fg:w="47"/><text x="57.7073%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.02%)</title><rect x="57.6822%" y="149" width="0.0191%" height="15" fill="rgb(246,46,29)" fg:x="12055" fg:w="4"/><text x="57.9322%" y="159.50"></text></g><g><title>csv_sql`ZSTD_freeDCtx (6 samples, 0.03%)</title><rect x="57.6822%" y="165" width="0.0287%" height="15" fill="rgb(246,185,52)" fg:x="12055" fg:w="6"/><text x="57.9322%" y="175.50"></text></g><g><title>csv_sql`ZSTD_createDCtx (16 samples, 0.08%)</title><rect x="57.7157%" y="149" width="0.0766%" height="15" fill="rgb(252,136,11)" fg:x="12062" fg:w="16"/><text x="57.9657%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (4 samples, 0.02%)</title><rect x="57.7731%" y="133" width="0.0191%" height="15" fill="rgb(219,138,53)" fg:x="12074" fg:w="4"/><text x="58.0231%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (4 samples, 0.02%)</title><rect x="57.7731%" y="117" width="0.0191%" height="15" fill="rgb(211,51,23)" fg:x="12074" fg:w="4"/><text x="58.0231%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="57.7731%" y="101" width="0.0191%" height="15" fill="rgb(247,221,28)" fg:x="12074" fg:w="4"/><text x="58.0231%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (4 samples, 0.02%)</title><rect x="57.7731%" y="85" width="0.0191%" height="15" fill="rgb(251,222,45)" fg:x="12074" fg:w="4"/><text x="58.0231%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (4 samples, 0.02%)</title><rect x="57.7731%" y="69" width="0.0191%" height="15" fill="rgb(217,162,53)" fg:x="12074" fg:w="4"/><text x="58.0231%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (4 samples, 0.02%)</title><rect x="57.7731%" y="53" width="0.0191%" height="15" fill="rgb(229,93,14)" fg:x="12074" fg:w="4"/><text x="58.0231%" y="63.50"></text></g><g><title>csv_sql`zstd::stream::raw::Decoder::with_dictionary (19 samples, 0.09%)</title><rect x="57.7109%" y="165" width="0.0909%" height="15" fill="rgb(209,67,49)" fg:x="12061" fg:w="19"/><text x="57.9609%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.02%)</title><rect x="57.8018%" y="165" width="0.0239%" height="15" fill="rgb(213,87,29)" fg:x="12080" fg:w="5"/><text x="58.0518%" y="175.50"></text></g><g><title>csv_sql`&lt;parquet::compression::zstd_codec::ZSTDCodec as parquet::compression::Codec&gt;::decompress (3,063 samples, 14.66%)</title><rect x="45.0883%" y="181" width="14.6562%" height="15" fill="rgb(205,151,52)" fg:x="9423" fg:w="3063"/><text x="45.3383%" y="191.50">csv_sql`&lt;parquet::comp..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (396 samples, 1.89%)</title><rect x="57.8497%" y="165" width="1.8948%" height="15" fill="rgb(253,215,39)" fg:x="12090" fg:w="396"/><text x="58.0997%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`malloc (4 samples, 0.02%)</title><rect x="59.7684%" y="181" width="0.0191%" height="15" fill="rgb(221,220,41)" fg:x="12491" fg:w="4"/><text x="60.0184%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (4 samples, 0.02%)</title><rect x="59.7684%" y="165" width="0.0191%" height="15" fill="rgb(218,133,21)" fg:x="12491" fg:w="4"/><text x="60.0184%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="59.7684%" y="149" width="0.0191%" height="15" fill="rgb(221,193,43)" fg:x="12491" fg:w="4"/><text x="60.0184%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (4 samples, 0.02%)</title><rect x="59.7684%" y="133" width="0.0191%" height="15" fill="rgb(240,128,52)" fg:x="12491" fg:w="4"/><text x="60.0184%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (4 samples, 0.02%)</title><rect x="59.7684%" y="117" width="0.0191%" height="15" fill="rgb(253,114,12)" fg:x="12491" fg:w="4"/><text x="60.0184%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (4 samples, 0.02%)</title><rect x="59.7684%" y="101" width="0.0191%" height="15" fill="rgb(215,223,47)" fg:x="12491" fg:w="4"/><text x="60.0184%" y="111.50"></text></g><g><title>csv_sql`parquet::file::serialized_reader::decode_page (3,076 samples, 14.72%)</title><rect x="45.0787%" y="197" width="14.7184%" height="15" fill="rgb(248,225,23)" fg:x="9421" fg:w="3076"/><text x="45.3287%" y="207.50">csv_sql`parquet::file:..</text></g><g><title>csv_sql`parquet::file::serialized_reader::read_page_header_len (4 samples, 0.02%)</title><rect x="59.7971%" y="197" width="0.0191%" height="15" fill="rgb(250,108,0)" fg:x="12497" fg:w="4"/><text x="60.0471%" y="207.50"></text></g><g><title>csv_sql`&lt;parquet::format::PageHeader as thrift::protocol::TSerializable&gt;::read_from_in_protocol (3 samples, 0.01%)</title><rect x="59.8019%" y="181" width="0.0144%" height="15" fill="rgb(228,208,7)" fg:x="12498" fg:w="3"/><text x="60.0519%" y="191.50"></text></g><g><title>csv_sql`&lt;parquet::format::Statistics as thrift::protocol::TSerializable&gt;::read_from_in_protocol (3 samples, 0.01%)</title><rect x="59.8019%" y="165" width="0.0144%" height="15" fill="rgb(244,45,10)" fg:x="12498" fg:w="3"/><text x="60.0519%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (236 samples, 1.13%)</title><rect x="59.8210%" y="197" width="1.1292%" height="15" fill="rgb(207,125,25)" fg:x="12502" fg:w="236"/><text x="60.0710%" y="207.50"></text></g><g><title>csv_sql`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;R&gt; as parquet::column::page::PageReader&gt;::get_next_page (3,380 samples, 16.17%)</title><rect x="45.0787%" y="213" width="16.1730%" height="15" fill="rgb(210,195,18)" fg:x="9421" fg:w="3380"/><text x="45.3287%" y="223.50">csv_sql`&lt;parquet::file::s..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (63 samples, 0.30%)</title><rect x="60.9503%" y="197" width="0.3014%" height="15" fill="rgb(249,80,12)" fg:x="12738" fg:w="63"/><text x="61.2003%" y="207.50"></text></g><g><title>csv_sql`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (3,439 samples, 16.46%)</title><rect x="44.8155%" y="229" width="16.4553%" height="15" fill="rgb(221,65,9)" fg:x="9366" fg:w="3439"/><text x="45.0655%" y="239.50">csv_sql`parquet::column::..</text></g><g><title>csv_sql`&lt;parquet::arrow::array_reader::byte_array::ByteArrayReader&lt;I&gt; as parquet::arrow::array_reader::ArrayReader&gt;::read_records (9,883 samples, 47.29%)</title><rect x="13.9911%" y="245" width="47.2893%" height="15" fill="rgb(235,49,36)" fg:x="2924" fg:w="9883"/><text x="14.2411%" y="255.50">csv_sql`&lt;parquet::arrow::array_reader::byte_array::ByteArrayReader&lt;I&gt; as parqu..</text></g><g><title>csv_sql`arrow_buffer::buffer::mutable::MutableBuffer::reallocate (3 samples, 0.01%)</title><rect x="61.3522%" y="197" width="0.0144%" height="15" fill="rgb(225,32,20)" fg:x="12822" fg:w="3"/><text x="61.6022%" y="207.50"></text></g><g><title>csv_sql`&lt;parquet::arrow::record_reader::buffer::ScalarBuffer&lt;T&gt; as parquet::arrow::record_reader::buffer::BufferQueue&gt;::spare_capacity_mut (195 samples, 0.93%)</title><rect x="61.3474%" y="213" width="0.9331%" height="15" fill="rgb(215,141,46)" fg:x="12821" fg:w="195"/><text x="61.5974%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (191 samples, 0.91%)</title><rect x="61.3666%" y="197" width="0.9139%" height="15" fill="rgb(250,160,47)" fg:x="12825" fg:w="191"/><text x="61.6166%" y="207.50"></text></g><g><title>csv_sql`parquet::util::bit_pack::unpack16 (10 samples, 0.05%)</title><rect x="63.6968%" y="165" width="0.0478%" height="15" fill="rgb(216,222,40)" fg:x="13312" fg:w="10"/><text x="63.9468%" y="175.50"></text></g><g><title>csv_sql`parquet::util::bit_pack::unpack32 (111 samples, 0.53%)</title><rect x="63.7447%" y="165" width="0.5311%" height="15" fill="rgb(234,217,39)" fg:x="13322" fg:w="111"/><text x="63.9947%" y="175.50"></text></g><g><title>csv_sql`parquet::util::bit_pack::unpack8 (3 samples, 0.01%)</title><rect x="64.2758%" y="165" width="0.0144%" height="15" fill="rgb(207,178,40)" fg:x="13433" fg:w="3"/><text x="64.5258%" y="175.50"></text></g><g><title>csv_sql`parquet::util::bit_util::BitReader::get_value (16 samples, 0.08%)</title><rect x="64.2902%" y="165" width="0.0766%" height="15" fill="rgb(221,136,13)" fg:x="13436" fg:w="16"/><text x="64.5402%" y="175.50"></text></g><g><title>csv_sql`parquet::util::bit_util::BitReader::get_batch (181 samples, 0.87%)</title><rect x="63.5198%" y="181" width="0.8661%" height="15" fill="rgb(249,199,10)" fg:x="13275" fg:w="181"/><text x="63.7698%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="64.3667%" y="165" width="0.0191%" height="15" fill="rgb(249,222,13)" fg:x="13452" fg:w="4"/><text x="64.6167%" y="175.50"></text></g><g><title>csv_sql`parquet::encodings::rle::RleDecoder::get_batch_with_dict (441 samples, 2.11%)</title><rect x="62.2805%" y="197" width="2.1101%" height="15" fill="rgb(244,185,38)" fg:x="13016" fg:w="441"/><text x="62.5305%" y="207.50">c..</text></g><g><title>csv_sql`&lt;parquet::encodings::decoding::DictDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::get (443 samples, 2.12%)</title><rect x="62.2805%" y="213" width="2.1197%" height="15" fill="rgb(236,202,9)" fg:x="13016" fg:w="443"/><text x="62.5305%" y="223.50">c..</text></g><g><title>csv_sql`ZSTD_decodeLiteralsBlock (4 samples, 0.02%)</title><rect x="64.4624%" y="85" width="0.0191%" height="15" fill="rgb(250,229,37)" fg:x="13472" fg:w="4"/><text x="64.7124%" y="95.50"></text></g><g><title>csv_sql`HUF_decompress4X_hufOnly_wksp (4 samples, 0.02%)</title><rect x="64.4624%" y="69" width="0.0191%" height="15" fill="rgb(206,174,23)" fg:x="13472" fg:w="4"/><text x="64.7124%" y="79.50"></text></g><g><title>csv_sql`HUF_readDTableX2_wksp (3 samples, 0.01%)</title><rect x="64.4672%" y="53" width="0.0144%" height="15" fill="rgb(211,33,43)" fg:x="13473" fg:w="3"/><text x="64.7172%" y="63.50"></text></g><g><title>csv_sql`ZSTD_decompressBlock_internal (30 samples, 0.14%)</title><rect x="64.4624%" y="101" width="0.1435%" height="15" fill="rgb(245,58,50)" fg:x="13472" fg:w="30"/><text x="64.7124%" y="111.50"></text></g><g><title>csv_sql`ZSTD_decompressSequences_bmi2 (26 samples, 0.12%)</title><rect x="64.4816%" y="85" width="0.1244%" height="15" fill="rgb(244,68,36)" fg:x="13476" fg:w="26"/><text x="64.7316%" y="95.50"></text></g><g><title>csv_sql`ZSTD_decompressContinueStream (69 samples, 0.33%)</title><rect x="64.4576%" y="133" width="0.3302%" height="15" fill="rgb(232,229,15)" fg:x="13471" fg:w="69"/><text x="64.7076%" y="143.50"></text></g><g><title>csv_sql`ZSTD_decompressContinue (68 samples, 0.33%)</title><rect x="64.4624%" y="117" width="0.3254%" height="15" fill="rgb(254,30,23)" fg:x="13472" fg:w="68"/><text x="64.7124%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (38 samples, 0.18%)</title><rect x="64.6060%" y="101" width="0.1818%" height="15" fill="rgb(235,160,14)" fg:x="13502" fg:w="38"/><text x="64.8560%" y="111.50"></text></g><g><title>csv_sql`ZSTD_decompressStream (86 samples, 0.41%)</title><rect x="64.4146%" y="149" width="0.4115%" height="15" fill="rgb(212,155,44)" fg:x="13462" fg:w="86"/><text x="64.6646%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.04%)</title><rect x="64.7878%" y="133" width="0.0383%" height="15" fill="rgb(226,2,50)" fg:x="13540" fg:w="8"/><text x="65.0378%" y="143.50"></text></g><g><title>csv_sql`&lt;parquet::compression::zstd_codec::ZSTDCodec as parquet::compression::Codec&gt;::decompress (175 samples, 0.84%)</title><rect x="64.4146%" y="165" width="0.8374%" height="15" fill="rgb(234,177,6)" fg:x="13462" fg:w="175"/><text x="64.6646%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (82 samples, 0.39%)</title><rect x="64.8596%" y="149" width="0.3924%" height="15" fill="rgb(217,24,9)" fg:x="13555" fg:w="82"/><text x="65.1096%" y="159.50"></text></g><g><title>csv_sql`parquet::file::serialized_reader::decode_page (178 samples, 0.85%)</title><rect x="64.4146%" y="181" width="0.8517%" height="15" fill="rgb(220,13,46)" fg:x="13462" fg:w="178"/><text x="64.6646%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (13 samples, 0.06%)</title><rect x="65.2663%" y="181" width="0.0622%" height="15" fill="rgb(239,221,27)" fg:x="13640" fg:w="13"/><text x="65.5163%" y="191.50"></text></g><g><title>csv_sql`&lt;parquet::arrow::array_reader::null_array::NullArrayReader&lt;T&gt; as parquet::arrow::array_reader::ArrayReader&gt;::read_records (869 samples, 4.16%)</title><rect x="61.2804%" y="245" width="4.1581%" height="15" fill="rgb(222,198,25)" fg:x="12807" fg:w="869"/><text x="61.5304%" y="255.50">csv_s..</text></g><g><title>csv_sql`parquet::arrow::array_reader::read_records (867 samples, 4.15%)</title><rect x="61.2900%" y="229" width="4.1485%" height="15" fill="rgb(211,99,13)" fg:x="12809" fg:w="867"/><text x="61.5400%" y="239.50">csv_s..</text></g><g><title>csv_sql`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (215 samples, 1.03%)</title><rect x="64.4098%" y="213" width="1.0288%" height="15" fill="rgb(232,111,31)" fg:x="13461" fg:w="215"/><text x="64.6598%" y="223.50"></text></g><g><title>csv_sql`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;R&gt; as parquet::column::page::PageReader&gt;::get_next_page (214 samples, 1.02%)</title><rect x="64.4146%" y="197" width="1.0240%" height="15" fill="rgb(245,82,37)" fg:x="13462" fg:w="214"/><text x="64.6646%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (23 samples, 0.11%)</title><rect x="65.3285%" y="181" width="0.1101%" height="15" fill="rgb(227,149,46)" fg:x="13653" fg:w="23"/><text x="65.5785%" y="191.50"></text></g><g><title>csv_sql`arrow_buffer::buffer::mutable::MutableBuffer::reallocate (51 samples, 0.24%)</title><rect x="65.5007%" y="213" width="0.2440%" height="15" fill="rgb(218,36,50)" fg:x="13689" fg:w="51"/><text x="65.7507%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (51 samples, 0.24%)</title><rect x="65.5007%" y="197" width="0.2440%" height="15" fill="rgb(226,80,48)" fg:x="13689" fg:w="51"/><text x="65.7507%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_memalign (51 samples, 0.24%)</title><rect x="65.5007%" y="181" width="0.2440%" height="15" fill="rgb(238,224,15)" fg:x="13689" fg:w="51"/><text x="65.7507%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (48 samples, 0.23%)</title><rect x="65.5151%" y="165" width="0.2297%" height="15" fill="rgb(241,136,10)" fg:x="13692" fg:w="48"/><text x="65.7651%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (47 samples, 0.22%)</title><rect x="65.5199%" y="149" width="0.2249%" height="15" fill="rgb(208,32,45)" fg:x="13693" fg:w="47"/><text x="65.7699%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (41 samples, 0.20%)</title><rect x="65.5486%" y="133" width="0.1962%" height="15" fill="rgb(207,135,9)" fg:x="13699" fg:w="41"/><text x="65.7986%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (41 samples, 0.20%)</title><rect x="65.5486%" y="117" width="0.1962%" height="15" fill="rgb(206,86,44)" fg:x="13699" fg:w="41"/><text x="65.7986%" y="127.50"></text></g><g><title>csv_sql`&lt;parquet::arrow::record_reader::buffer::ScalarBuffer&lt;T&gt; as parquet::arrow::record_reader::buffer::BufferQueue&gt;::spare_capacity_mut (723 samples, 3.46%)</title><rect x="65.4960%" y="229" width="3.4595%" height="15" fill="rgb(245,177,15)" fg:x="13688" fg:w="723"/><text x="65.7460%" y="239.50">csv..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (671 samples, 3.21%)</title><rect x="65.7448%" y="213" width="3.2107%" height="15" fill="rgb(206,64,50)" fg:x="13740" fg:w="671"/><text x="65.9948%" y="223.50">lib..</text></g><g><title>csv_sql`parquet::encodings::rle::RleDecoder::reload (6 samples, 0.03%)</title><rect x="72.0417%" y="197" width="0.0287%" height="15" fill="rgb(234,36,40)" fg:x="15056" fg:w="6"/><text x="72.2917%" y="207.50"></text></g><g><title>csv_sql`parquet::util::bit_util::BitReader::get_vlq_int (4 samples, 0.02%)</title><rect x="72.0513%" y="181" width="0.0191%" height="15" fill="rgb(213,64,8)" fg:x="15058" fg:w="4"/><text x="72.3013%" y="191.50"></text></g><g><title>csv_sql`parquet::util::bit_pack::unpack32 (5 samples, 0.02%)</title><rect x="72.0704%" y="197" width="0.0239%" height="15" fill="rgb(210,75,36)" fg:x="15062" fg:w="5"/><text x="72.3204%" y="207.50"></text></g><g><title>csv_sql`parquet::util::bit_pack::unpack16 (4 samples, 0.02%)</title><rect x="72.3049%" y="181" width="0.0191%" height="15" fill="rgb(229,88,21)" fg:x="15111" fg:w="4"/><text x="72.5549%" y="191.50"></text></g><g><title>csv_sql`parquet::util::bit_pack::unpack32 (143 samples, 0.68%)</title><rect x="72.3240%" y="181" width="0.6842%" height="15" fill="rgb(252,204,47)" fg:x="15115" fg:w="143"/><text x="72.5740%" y="191.50"></text></g><g><title>csv_sql`parquet::util::bit_util::BitReader::get_value (28 samples, 0.13%)</title><rect x="73.0083%" y="181" width="0.1340%" height="15" fill="rgb(208,77,27)" fg:x="15258" fg:w="28"/><text x="73.2583%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.02%)</title><rect x="73.1183%" y="165" width="0.0239%" height="15" fill="rgb(221,76,26)" fg:x="15281" fg:w="5"/><text x="73.3683%" y="175.50"></text></g><g><title>csv_sql`parquet::encodings::rle::RleDecoder::get_batch_with_dict (876 samples, 4.19%)</title><rect x="68.9602%" y="213" width="4.1916%" height="15" fill="rgb(225,139,18)" fg:x="14412" fg:w="876"/><text x="69.2102%" y="223.50">csv_s..</text></g><g><title>csv_sql`parquet::util::bit_util::BitReader::get_batch (221 samples, 1.06%)</title><rect x="72.0944%" y="197" width="1.0575%" height="15" fill="rgb(230,137,11)" fg:x="15067" fg:w="221"/><text x="72.3444%" y="207.50"></text></g><g><title>csv_sql`&lt;parquet::encodings::decoding::DictDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::get (880 samples, 4.21%)</title><rect x="68.9555%" y="229" width="4.2107%" height="15" fill="rgb(212,28,1)" fg:x="14411" fg:w="880"/><text x="69.2055%" y="239.50">csv_s..</text></g><g><title>csv_sql`parquet::encodings::rle::RleDecoder::reload (3 samples, 0.01%)</title><rect x="73.1518%" y="213" width="0.0144%" height="15" fill="rgb(248,164,17)" fg:x="15288" fg:w="3"/><text x="73.4018%" y="223.50"></text></g><g><title>csv_sql`&lt;parquet::encodings::decoding::PlainDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::get (106 samples, 0.51%)</title><rect x="73.1662%" y="229" width="0.5072%" height="15" fill="rgb(222,171,42)" fg:x="15291" fg:w="106"/><text x="73.4162%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (102 samples, 0.49%)</title><rect x="73.1853%" y="213" width="0.4881%" height="15" fill="rgb(243,84,45)" fg:x="15295" fg:w="102"/><text x="73.4353%" y="223.50"></text></g><g><title>csv_sql`bytes::bytes::shared_drop (4 samples, 0.02%)</title><rect x="73.6925%" y="181" width="0.0191%" height="15" fill="rgb(252,49,23)" fg:x="15401" fg:w="4"/><text x="73.9425%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.02%)</title><rect x="73.6925%" y="165" width="0.0191%" height="15" fill="rgb(215,19,7)" fg:x="15401" fg:w="4"/><text x="73.9425%" y="175.50"></text></g><g><title>csv_sql`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::set_data (6 samples, 0.03%)</title><rect x="73.6877%" y="213" width="0.0287%" height="15" fill="rgb(238,81,41)" fg:x="15400" fg:w="6"/><text x="73.9377%" y="223.50"></text></g><g><title>csv_sql`&lt;parquet::encodings::decoding::PlainDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::set_data (5 samples, 0.02%)</title><rect x="73.6925%" y="197" width="0.0239%" height="15" fill="rgb(210,199,37)" fg:x="15401" fg:w="5"/><text x="73.9425%" y="207.50"></text></g><g><title>csv_sql`&lt;parquet::encodings::decoding::PlainDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::get (11 samples, 0.05%)</title><rect x="73.7164%" y="197" width="0.0526%" height="15" fill="rgb(244,192,49)" fg:x="15406" fg:w="11"/><text x="73.9664%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.05%)</title><rect x="73.7164%" y="181" width="0.0526%" height="15" fill="rgb(226,211,11)" fg:x="15406" fg:w="11"/><text x="73.9664%" y="191.50"></text></g><g><title>csv_sql`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::set_dict (97 samples, 0.46%)</title><rect x="73.7164%" y="213" width="0.4641%" height="15" fill="rgb(236,162,54)" fg:x="15406" fg:w="97"/><text x="73.9664%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (83 samples, 0.40%)</title><rect x="73.7834%" y="197" width="0.3971%" height="15" fill="rgb(220,229,9)" fg:x="15420" fg:w="83"/><text x="74.0334%" y="207.50"></text></g><g><title>csv_sql`HUF_readDTableX1_wksp (10 samples, 0.05%)</title><rect x="74.3241%" y="69" width="0.0478%" height="15" fill="rgb(250,87,22)" fg:x="15533" fg:w="10"/><text x="74.5741%" y="79.50"></text></g><g><title>csv_sql`HUF_readStats_body_bmi2 (5 samples, 0.02%)</title><rect x="74.3481%" y="53" width="0.0239%" height="15" fill="rgb(239,43,17)" fg:x="15538" fg:w="5"/><text x="74.5981%" y="63.50"></text></g><g><title>csv_sql`FSE_decompress_wksp_body_bmi2 (5 samples, 0.02%)</title><rect x="74.3481%" y="37" width="0.0239%" height="15" fill="rgb(231,177,25)" fg:x="15538" fg:w="5"/><text x="74.5981%" y="47.50"></text></g><g><title>csv_sql`HUF_decompress4X_hufOnly_wksp (12 samples, 0.06%)</title><rect x="74.3193%" y="85" width="0.0574%" height="15" fill="rgb(219,179,1)" fg:x="15532" fg:w="12"/><text x="74.5693%" y="95.50"></text></g><g><title>csv_sql`ZSTD_decodeLiteralsBlock (20 samples, 0.10%)</title><rect x="74.3098%" y="101" width="0.0957%" height="15" fill="rgb(238,219,53)" fg:x="15530" fg:w="20"/><text x="74.5598%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.02%)</title><rect x="74.3815%" y="85" width="0.0239%" height="15" fill="rgb(232,167,36)" fg:x="15545" fg:w="5"/><text x="74.6315%" y="95.50"></text></g><g><title>csv_sql`FSE_readNCount (8 samples, 0.04%)</title><rect x="74.4055%" y="69" width="0.0383%" height="15" fill="rgb(244,19,51)" fg:x="15550" fg:w="8"/><text x="74.6555%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (3 samples, 0.01%)</title><rect x="74.4294%" y="53" width="0.0144%" height="15" fill="rgb(224,6,22)" fg:x="15555" fg:w="3"/><text x="74.6794%" y="63.50"></text></g><g><title>csv_sql`ZSTD_decodeSeqHeaders (54 samples, 0.26%)</title><rect x="74.4055%" y="101" width="0.2584%" height="15" fill="rgb(224,145,5)" fg:x="15550" fg:w="54"/><text x="74.6555%" y="111.50"></text></g><g><title>csv_sql`ZSTD_buildSeqTable (54 samples, 0.26%)</title><rect x="74.4055%" y="85" width="0.2584%" height="15" fill="rgb(234,130,49)" fg:x="15550" fg:w="54"/><text x="74.6555%" y="95.50"></text></g><g><title>csv_sql`ZSTD_buildFSETable_body_bmi2 (46 samples, 0.22%)</title><rect x="74.4438%" y="69" width="0.2201%" height="15" fill="rgb(254,6,2)" fg:x="15558" fg:w="46"/><text x="74.6938%" y="79.50"></text></g><g><title>csv_sql`ZSTD_decompressSequencesSplitLitBuffer_bmi2 (11 samples, 0.05%)</title><rect x="74.6639%" y="101" width="0.0526%" height="15" fill="rgb(208,96,46)" fg:x="15604" fg:w="11"/><text x="74.9139%" y="111.50"></text></g><g><title>csv_sql`ZSTD_decompressSequences_bmi2 (2,168 samples, 10.37%)</title><rect x="74.7165%" y="101" width="10.3737%" height="15" fill="rgb(239,3,39)" fg:x="15615" fg:w="2168"/><text x="74.9665%" y="111.50">csv_sql`ZSTD_de..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (13 samples, 0.06%)</title><rect x="85.0280%" y="85" width="0.0622%" height="15" fill="rgb(233,210,1)" fg:x="17770" fg:w="13"/><text x="85.2780%" y="95.50"></text></g><g><title>csv_sql`ZSTD_decompressBlock_internal (2,255 samples, 10.79%)</title><rect x="74.3050%" y="117" width="10.7900%" height="15" fill="rgb(244,137,37)" fg:x="15529" fg:w="2255"/><text x="74.5550%" y="127.50">csv_sql`ZSTD_dec..</text></g><g><title>csv_sql`ZSTD_decompressContinueStream (2,282 samples, 10.92%)</title><rect x="74.3002%" y="149" width="10.9192%" height="15" fill="rgb(240,136,2)" fg:x="15528" fg:w="2282"/><text x="74.5502%" y="159.50">csv_sql`ZSTD_dec..</text></g><g><title>csv_sql`ZSTD_decompressContinue (2,282 samples, 10.92%)</title><rect x="74.3002%" y="133" width="10.9192%" height="15" fill="rgb(239,18,37)" fg:x="15528" fg:w="2282"/><text x="74.5502%" y="143.50">csv_sql`ZSTD_dec..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (26 samples, 0.12%)</title><rect x="85.0950%" y="117" width="0.1244%" height="15" fill="rgb(218,185,22)" fg:x="17784" fg:w="26"/><text x="85.3450%" y="127.50"></text></g><g><title>csv_sql`ZSTD_decompressStream (2,351 samples, 11.25%)</title><rect x="74.2332%" y="165" width="11.2493%" height="15" fill="rgb(225,218,4)" fg:x="15514" fg:w="2351"/><text x="74.4832%" y="175.50">csv_sql`ZSTD_deco..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (54 samples, 0.26%)</title><rect x="85.2242%" y="149" width="0.2584%" height="15" fill="rgb(230,182,32)" fg:x="17811" fg:w="54"/><text x="85.4742%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.01%)</title><rect x="85.4826%" y="149" width="0.0144%" height="15" fill="rgb(242,56,43)" fg:x="17865" fg:w="3"/><text x="85.7326%" y="159.50"></text></g><g><title>csv_sql`ZSTD_freeDCtx (5 samples, 0.02%)</title><rect x="85.4826%" y="165" width="0.0239%" height="15" fill="rgb(233,99,24)" fg:x="17865" fg:w="5"/><text x="85.7326%" y="175.50"></text></g><g><title>csv_sql`zstd::stream::raw::Decoder::with_dictionary (5 samples, 0.02%)</title><rect x="85.5113%" y="165" width="0.0239%" height="15" fill="rgb(234,209,42)" fg:x="17871" fg:w="5"/><text x="85.7613%" y="175.50"></text></g><g><title>csv_sql`ZSTD_createDCtx (5 samples, 0.02%)</title><rect x="85.5113%" y="149" width="0.0239%" height="15" fill="rgb(227,7,12)" fg:x="17871" fg:w="5"/><text x="85.7613%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.01%)</title><rect x="85.5208%" y="133" width="0.0144%" height="15" fill="rgb(245,203,43)" fg:x="17873" fg:w="3"/><text x="85.7708%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (3 samples, 0.01%)</title><rect x="85.5208%" y="117" width="0.0144%" height="15" fill="rgb(238,205,33)" fg:x="17873" fg:w="3"/><text x="85.7708%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="85.5208%" y="101" width="0.0144%" height="15" fill="rgb(231,56,7)" fg:x="17873" fg:w="3"/><text x="85.7708%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (3 samples, 0.01%)</title><rect x="85.5208%" y="85" width="0.0144%" height="15" fill="rgb(244,186,29)" fg:x="17873" fg:w="3"/><text x="85.7708%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.01%)</title><rect x="85.5448%" y="165" width="0.0144%" height="15" fill="rgb(234,111,31)" fg:x="17878" fg:w="3"/><text x="85.7948%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (3 samples, 0.01%)</title><rect x="85.5448%" y="149" width="0.0144%" height="15" fill="rgb(241,149,10)" fg:x="17878" fg:w="3"/><text x="85.7948%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="85.5448%" y="133" width="0.0144%" height="15" fill="rgb(249,206,44)" fg:x="17878" fg:w="3"/><text x="85.7948%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (3 samples, 0.01%)</title><rect x="85.5448%" y="117" width="0.0144%" height="15" fill="rgb(251,153,30)" fg:x="17878" fg:w="3"/><text x="85.7948%" y="127.50"></text></g><g><title>csv_sql`&lt;parquet::compression::zstd_codec::ZSTDCodec as parquet::compression::Codec&gt;::decompress (2,648 samples, 12.67%)</title><rect x="74.1949%" y="181" width="12.6705%" height="15" fill="rgb(239,152,38)" fg:x="15506" fg:w="2648"/><text x="74.4449%" y="191.50">csv_sql`&lt;parquet::c..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (272 samples, 1.30%)</title><rect x="85.5639%" y="165" width="1.3015%" height="15" fill="rgb(249,139,47)" fg:x="17882" fg:w="272"/><text x="85.8139%" y="175.50"></text></g><g><title>csv_sql`parquet::file::serialized_reader::decode_page (2,659 samples, 12.72%)</title><rect x="74.1902%" y="197" width="12.7231%" height="15" fill="rgb(244,64,35)" fg:x="15505" fg:w="2659"/><text x="74.4402%" y="207.50">csv_sql`parquet::fi..</text></g><g><title>csv_sql`&lt;parquet::format::PageHeader as thrift::protocol::TSerializable&gt;::read_from_in_protocol (4 samples, 0.02%)</title><rect x="86.9132%" y="181" width="0.0191%" height="15" fill="rgb(216,46,15)" fg:x="18164" fg:w="4"/><text x="87.1632%" y="191.50"></text></g><g><title>csv_sql`parquet::file::serialized_reader::read_page_header_len (5 samples, 0.02%)</title><rect x="86.9132%" y="197" width="0.0239%" height="15" fill="rgb(250,74,19)" fg:x="18164" fg:w="5"/><text x="87.1632%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (199 samples, 0.95%)</title><rect x="86.9420%" y="197" width="0.9522%" height="15" fill="rgb(249,42,33)" fg:x="18170" fg:w="199"/><text x="87.1920%" y="207.50"></text></g><g><title>csv_sql`&lt;parquet::arrow::array_reader::primitive_array::PrimitiveArrayReader&lt;T&gt; as parquet::arrow::array_reader::ArrayReader&gt;::read_records (4,786 samples, 22.90%)</title><rect x="65.4385%" y="245" width="22.9006%" height="15" fill="rgb(242,149,17)" fg:x="13676" fg:w="4786"/><text x="65.6885%" y="255.50">csv_sql`&lt;parquet::arrow::array_reade..</text></g><g><title>csv_sql`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (3,062 samples, 14.65%)</title><rect x="73.6877%" y="229" width="14.6514%" height="15" fill="rgb(244,29,21)" fg:x="15400" fg:w="3062"/><text x="73.9377%" y="239.50">csv_sql`parquet::colum..</text></g><g><title>csv_sql`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;R&gt; as parquet::column::page::PageReader&gt;::get_next_page (2,959 samples, 14.16%)</title><rect x="74.1806%" y="213" width="14.1586%" height="15" fill="rgb(220,130,37)" fg:x="15503" fg:w="2959"/><text x="74.4306%" y="223.50">csv_sql`&lt;parquet::fil..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (93 samples, 0.44%)</title><rect x="87.8942%" y="197" width="0.4450%" height="15" fill="rgb(211,67,2)" fg:x="18369" fg:w="93"/><text x="88.1442%" y="207.50"></text></g><g><title>csv_sql`&lt;parquet::arrow::array_reader::struct_array::StructArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::read_records (15,543 samples, 74.37%)</title><rect x="13.9767%" y="261" width="74.3720%" height="15" fill="rgb(235,68,52)" fg:x="2921" fg:w="15543"/><text x="14.2267%" y="271.50">csv_sql`&lt;parquet::arrow::array_reader::struct_array::StructArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::read_r..</text></g><g><title>csv_sql`alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.01%)</title><rect x="88.3535%" y="261" width="0.0144%" height="15" fill="rgb(246,142,3)" fg:x="18465" fg:w="3"/><text x="88.6035%" y="271.50"></text></g><g><title>csv_sql`&lt;parquet::arrow::arrow_reader::ParquetRecordBatchReader as core::iter::traits::iterator::Iterator&gt;::next (18,401 samples, 88.05%)</title><rect x="0.3445%" y="277" width="88.0473%" height="15" fill="rgb(241,25,7)" fg:x="72" fg:w="18401"/><text x="0.5945%" y="287.50">csv_sql`&lt;parquet::arrow::arrow_reader::ParquetRecordBatchReader as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>csv_sql`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.02%)</title><rect x="88.3918%" y="277" width="0.0239%" height="15" fill="rgb(242,119,39)" fg:x="18473" fg:w="5"/><text x="88.6418%" y="287.50"></text></g><g><title>csv_sql`alloc::raw_vec::finish_grow (4 samples, 0.02%)</title><rect x="88.3966%" y="261" width="0.0191%" height="15" fill="rgb(241,98,45)" fg:x="18474" fg:w="4"/><text x="88.6466%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.02%)</title><rect x="88.3966%" y="245" width="0.0191%" height="15" fill="rgb(254,28,30)" fg:x="18474" fg:w="4"/><text x="88.6466%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.02%)</title><rect x="88.3966%" y="229" width="0.0191%" height="15" fill="rgb(241,142,54)" fg:x="18474" fg:w="4"/><text x="88.6466%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 0.02%)</title><rect x="88.3966%" y="213" width="0.0191%" height="15" fill="rgb(222,85,15)" fg:x="18474" fg:w="4"/><text x="88.6466%" y="223.50"></text></g><g><title>csv_sql`arrow_array::record_batch::RecordBatch::try_new_impl (3 samples, 0.01%)</title><rect x="88.4157%" y="277" width="0.0144%" height="15" fill="rgb(210,85,47)" fg:x="18478" fg:w="3"/><text x="88.6657%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="88.4444%" y="261" width="0.0144%" height="15" fill="rgb(224,206,25)" fg:x="18484" fg:w="3"/><text x="88.6944%" y="271.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (12 samples, 0.06%)</title><rect x="88.4301%" y="277" width="0.0574%" height="15" fill="rgb(243,201,19)" fg:x="18481" fg:w="12"/><text x="88.6801%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.03%)</title><rect x="88.4588%" y="261" width="0.0287%" height="15" fill="rgb(236,59,4)" fg:x="18487" fg:w="6"/><text x="88.7088%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.02%)</title><rect x="88.4636%" y="245" width="0.0239%" height="15" fill="rgb(254,179,45)" fg:x="18488" fg:w="5"/><text x="88.7136%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="88.4731%" y="229" width="0.0144%" height="15" fill="rgb(226,14,10)" fg:x="18490" fg:w="3"/><text x="88.7231%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.14%)</title><rect x="88.4971%" y="165" width="0.1435%" height="15" fill="rgb(244,27,41)" fg:x="18495" fg:w="30"/><text x="88.7471%" y="175.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;parquet::file::serialized_reader::SerializedPageReader&lt;parquet::arrow::async_reader::ColumnChunkData&gt;&gt; (45 samples, 0.22%)</title><rect x="88.4971%" y="213" width="0.2153%" height="15" fill="rgb(235,35,32)" fg:x="18495" fg:w="45"/><text x="88.7471%" y="223.50"></text></g><g><title>csv_sql`alloc::sync::Arc&lt;T&gt;::drop_slow (45 samples, 0.22%)</title><rect x="88.4971%" y="197" width="0.2153%" height="15" fill="rgb(218,68,31)" fg:x="18495" fg:w="45"/><text x="88.7471%" y="207.50"></text></g><g><title>csv_sql`bytes::bytes::promotable_even_drop (45 samples, 0.22%)</title><rect x="88.4971%" y="181" width="0.2153%" height="15" fill="rgb(207,120,37)" fg:x="18495" fg:w="45"/><text x="88.7471%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (15 samples, 0.07%)</title><rect x="88.6406%" y="165" width="0.0718%" height="15" fill="rgb(227,98,0)" fg:x="18525" fg:w="15"/><text x="88.8906%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (15 samples, 0.07%)</title><rect x="88.6406%" y="149" width="0.0718%" height="15" fill="rgb(207,7,3)" fg:x="18525" fg:w="15"/><text x="88.8906%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (15 samples, 0.07%)</title><rect x="88.6406%" y="133" width="0.0718%" height="15" fill="rgb(206,98,19)" fg:x="18525" fg:w="15"/><text x="88.8906%" y="143.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::column::reader::GenericColumnReader&lt;parquet::column::reader::decoder::RepetitionLevelDecoderImpl,parquet::arrow::record_reader::definition_levels::DefinitionLevelBufferDecoder,parquet::arrow::array_reader::byte_array::ByteArrayColumnValueDecoder&lt;i32&gt;&gt;&gt;&gt; (48 samples, 0.23%)</title><rect x="88.4923%" y="229" width="0.2297%" height="15" fill="rgb(217,5,26)" fg:x="18494" fg:w="48"/><text x="88.7423%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 0.07%)</title><rect x="88.7219%" y="165" width="0.0670%" height="15" fill="rgb(235,190,38)" fg:x="18542" fg:w="14"/><text x="88.9719%" y="175.50"></text></g><g><title>csv_sql`bytes::bytes::promotable_even_drop (47 samples, 0.22%)</title><rect x="88.7219%" y="181" width="0.2249%" height="15" fill="rgb(247,86,24)" fg:x="18542" fg:w="47"/><text x="88.9719%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (33 samples, 0.16%)</title><rect x="88.7889%" y="165" width="0.1579%" height="15" fill="rgb(205,101,16)" fg:x="18556" fg:w="33"/><text x="89.0389%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (33 samples, 0.16%)</title><rect x="88.7889%" y="149" width="0.1579%" height="15" fill="rgb(246,168,33)" fg:x="18556" fg:w="33"/><text x="89.0389%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (33 samples, 0.16%)</title><rect x="88.7889%" y="133" width="0.1579%" height="15" fill="rgb(231,114,1)" fg:x="18556" fg:w="33"/><text x="89.0389%" y="143.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::column::reader::GenericColumnReader&lt;parquet::column::reader::decoder::RepetitionLevelDecoderImpl,parquet::arrow::record_reader::definition_levels::DefinitionLevelBufferDecoder,parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;parquet::data_type::BoolType&gt;&gt;&gt;&gt; (48 samples, 0.23%)</title><rect x="88.7219%" y="229" width="0.2297%" height="15" fill="rgb(207,184,53)" fg:x="18542" fg:w="48"/><text x="88.9719%" y="239.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;parquet::file::serialized_reader::SerializedPageReader&lt;parquet::arrow::async_reader::ColumnChunkData&gt;&gt; (48 samples, 0.23%)</title><rect x="88.7219%" y="213" width="0.2297%" height="15" fill="rgb(224,95,51)" fg:x="18542" fg:w="48"/><text x="88.9719%" y="223.50"></text></g><g><title>csv_sql`alloc::sync::Arc&lt;T&gt;::drop_slow (48 samples, 0.23%)</title><rect x="88.7219%" y="197" width="0.2297%" height="15" fill="rgb(212,188,45)" fg:x="18542" fg:w="48"/><text x="88.9719%" y="207.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;parquet::arrow::array_reader::byte_array::ByteArrayDecoder&gt; (14 samples, 0.07%)</title><rect x="88.9516%" y="229" width="0.0670%" height="15" fill="rgb(223,154,38)" fg:x="18590" fg:w="14"/><text x="89.2016%" y="239.50"></text></g><g><title>csv_sql`bytes::bytes::shared_drop (14 samples, 0.07%)</title><rect x="88.9516%" y="213" width="0.0670%" height="15" fill="rgb(251,22,52)" fg:x="18590" fg:w="14"/><text x="89.2016%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (13 samples, 0.06%)</title><rect x="88.9564%" y="197" width="0.0622%" height="15" fill="rgb(229,209,22)" fg:x="18591" fg:w="13"/><text x="89.2064%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (13 samples, 0.06%)</title><rect x="88.9564%" y="181" width="0.0622%" height="15" fill="rgb(234,138,34)" fg:x="18591" fg:w="13"/><text x="89.2064%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (13 samples, 0.06%)</title><rect x="88.9564%" y="165" width="0.0622%" height="15" fill="rgb(212,95,11)" fg:x="18591" fg:w="13"/><text x="89.2064%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.02%)</title><rect x="89.0186%" y="181" width="0.0191%" height="15" fill="rgb(240,179,47)" fg:x="18604" fg:w="4"/><text x="89.2686%" y="191.50"></text></g><g><title>csv_sql`bytes::bytes::shared_drop (45 samples, 0.22%)</title><rect x="89.0186%" y="197" width="0.2153%" height="15" fill="rgb(240,163,11)" fg:x="18604" fg:w="45"/><text x="89.2686%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (41 samples, 0.20%)</title><rect x="89.0378%" y="181" width="0.1962%" height="15" fill="rgb(236,37,12)" fg:x="18608" fg:w="41"/><text x="89.2878%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (41 samples, 0.20%)</title><rect x="89.0378%" y="165" width="0.1962%" height="15" fill="rgb(232,164,16)" fg:x="18608" fg:w="41"/><text x="89.2878%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (41 samples, 0.20%)</title><rect x="89.0378%" y="149" width="0.1962%" height="15" fill="rgb(244,205,15)" fg:x="18608" fg:w="41"/><text x="89.2878%" y="159.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;parquet::encodings::decoding::DictDecoder&lt;parquet::data_type::DoubleType&gt;&gt; (63 samples, 0.30%)</title><rect x="89.0186%" y="213" width="0.3014%" height="15" fill="rgb(223,117,47)" fg:x="18604" fg:w="63"/><text x="89.2686%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (17 samples, 0.08%)</title><rect x="89.2387%" y="197" width="0.0813%" height="15" fill="rgb(244,107,35)" fg:x="18650" fg:w="17"/><text x="89.4887%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (17 samples, 0.08%)</title><rect x="89.2387%" y="181" width="0.0813%" height="15" fill="rgb(205,140,8)" fg:x="18650" fg:w="17"/><text x="89.4887%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (17 samples, 0.08%)</title><rect x="89.2387%" y="165" width="0.0813%" height="15" fill="rgb(228,84,46)" fg:x="18650" fg:w="17"/><text x="89.4887%" y="175.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;parquet::encodings::decoding::PlainDecoder&lt;parquet::data_type::FloatType&gt;&gt; (18 samples, 0.09%)</title><rect x="89.3201%" y="213" width="0.0861%" height="15" fill="rgb(254,188,9)" fg:x="18667" fg:w="18"/><text x="89.5701%" y="223.50"></text></g><g><title>csv_sql`bytes::bytes::shared_drop (18 samples, 0.09%)</title><rect x="89.3201%" y="197" width="0.0861%" height="15" fill="rgb(206,112,54)" fg:x="18667" fg:w="18"/><text x="89.5701%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (17 samples, 0.08%)</title><rect x="89.3248%" y="181" width="0.0813%" height="15" fill="rgb(216,84,49)" fg:x="18668" fg:w="17"/><text x="89.5748%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (17 samples, 0.08%)</title><rect x="89.3248%" y="165" width="0.0813%" height="15" fill="rgb(214,194,35)" fg:x="18668" fg:w="17"/><text x="89.5748%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (17 samples, 0.08%)</title><rect x="89.3248%" y="149" width="0.0813%" height="15" fill="rgb(249,28,3)" fg:x="18668" fg:w="17"/><text x="89.5748%" y="159.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;parquet::basic::Encoding,alloc::boxed::Box&lt;dyn parquet::encodings::decoding::Decoder&lt;parquet::data_type::BoolType&gt;&gt;&gt;&gt; (82 samples, 0.39%)</title><rect x="89.0186%" y="229" width="0.3924%" height="15" fill="rgb(222,56,52)" fg:x="18604" fg:w="82"/><text x="89.2686%" y="239.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;parquet::arrow::arrow_reader::ParquetRecordBatchReader&gt; (194 samples, 0.93%)</title><rect x="88.4875%" y="277" width="0.9283%" height="15" fill="rgb(245,217,50)" fg:x="18493" fg:w="194"/><text x="88.7375%" y="287.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;parquet::arrow::array_reader::struct_array::StructArrayReader&gt; (194 samples, 0.93%)</title><rect x="88.4875%" y="261" width="0.9283%" height="15" fill="rgb(213,201,24)" fg:x="18493" fg:w="194"/><text x="88.7375%" y="271.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;dyn arrow_json::reader::ArrayDecoder&gt;&gt;&gt; (194 samples, 0.93%)</title><rect x="88.4875%" y="245" width="0.9283%" height="15" fill="rgb(248,116,28)" fg:x="18493" fg:w="194"/><text x="88.7375%" y="255.50"></text></g><g><title>csv_sql`parquet::arrow::async_reader::ReaderFactory&lt;T&gt;::read_row_group::_{{closure}} (4 samples, 0.02%)</title><rect x="89.4158%" y="277" width="0.0191%" height="15" fill="rgb(219,72,43)" fg:x="18687" fg:w="4"/><text x="89.6658%" y="287.50"></text></g><g><title>csv_sql`parquet::arrow::async_reader::InMemoryRowGroup::fetch::_{{closure}} (3 samples, 0.01%)</title><rect x="89.4205%" y="261" width="0.0144%" height="15" fill="rgb(209,138,14)" fg:x="18688" fg:w="3"/><text x="89.6705%" y="271.50"></text></g><g><title>csv_sql`&lt;parquet::arrow::async_reader::store::ParquetObjectReader as parquet::arrow::async_reader::AsyncFileReader&gt;::get_byte_ranges::_{{closure}} (3 samples, 0.01%)</title><rect x="89.4205%" y="245" width="0.0144%" height="15" fill="rgb(222,18,33)" fg:x="18688" fg:w="3"/><text x="89.6705%" y="255.50"></text></g><g><title>csv_sql`&lt;alloc::sync::Arc&lt;dyn object_store::ObjectStore&gt; as object_store::ObjectStore&gt;::get_ranges::_{{closure}} (3 samples, 0.01%)</title><rect x="89.4205%" y="229" width="0.0144%" height="15" fill="rgb(213,199,7)" fg:x="18688" fg:w="3"/><text x="89.6705%" y="239.50"></text></g><g><title>csv_sql`&lt;futures_util::stream::stream::map::Map&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next (18,678 samples, 89.37%)</title><rect x="0.0813%" y="293" width="89.3727%" height="15" fill="rgb(250,110,10)" fg:x="17" fg:w="18678"/><text x="0.3313%" y="303.50">csv_sql`&lt;futures_util::stream::stream::map::Map&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next</text></g><g><title>csv_sql`datafusion::datasource::physical_plan::file_scan_config::PartitionColumnProjector::project (4 samples, 0.02%)</title><rect x="89.4588%" y="293" width="0.0191%" height="15" fill="rgb(248,123,6)" fg:x="18696" fg:w="4"/><text x="89.7088%" y="303.50"></text></g><g><title>csv_sql`&lt;datafusion::datasource::physical_plan::file_stream::FileStream&lt;F&gt; as futures_core::stream::Stream&gt;::poll_next (18,696 samples, 89.46%)</title><rect x="0.0383%" y="309" width="89.4588%" height="15" fill="rgb(206,91,31)" fg:x="8" fg:w="18696"/><text x="0.2883%" y="319.50">csv_sql`&lt;datafusion::datasource::physical_plan::file_stream::FileStream&lt;F&gt; as futures_core::stream::Stream&gt;::poll_next</text></g><g><title>csv_sql`&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (18,703 samples, 89.49%)</title><rect x="0.0191%" y="325" width="89.4923%" height="15" fill="rgb(211,154,13)" fg:x="4" fg:w="18703"/><text x="0.2691%" y="335.50">csv_sql`&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_kernel.dylib`madvise (42 samples, 0.20%)</title><rect x="89.5784%" y="245" width="0.2010%" height="15" fill="rgb(225,148,7)" fg:x="18721" fg:w="42"/><text x="89.8284%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`large_entry_for_pointer_no_lock (8 samples, 0.04%)</title><rect x="89.7842%" y="229" width="0.0383%" height="15" fill="rgb(220,160,43)" fg:x="18764" fg:w="8"/><text x="90.0342%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_size (5 samples, 0.02%)</title><rect x="89.8225%" y="229" width="0.0239%" height="15" fill="rgb(213,52,39)" fg:x="18772" fg:w="5"/><text x="90.0725%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.08%)</title><rect x="89.7794%" y="245" width="0.0766%" height="15" fill="rgb(243,137,7)" fg:x="18763" fg:w="16"/><text x="90.0294%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (483 samples, 2.31%)</title><rect x="89.8943%" y="213" width="2.3111%" height="15" fill="rgb(230,79,13)" fg:x="18787" fg:w="483"/><text x="90.1443%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`free_large (493 samples, 2.36%)</title><rect x="89.8560%" y="245" width="2.3590%" height="15" fill="rgb(247,105,23)" fg:x="18779" fg:w="493"/><text x="90.1060%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (486 samples, 2.33%)</title><rect x="89.8895%" y="229" width="2.3255%" height="15" fill="rgb(223,179,41)" fg:x="18786" fg:w="486"/><text x="90.1395%" y="239.50">l..</text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.01%)</title><rect x="92.2197%" y="229" width="0.0144%" height="15" fill="rgb(218,9,34)" fg:x="19273" fg:w="3"/><text x="92.4697%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.01%)</title><rect x="92.2341%" y="229" width="0.0144%" height="15" fill="rgb(222,106,8)" fg:x="19276" fg:w="3"/><text x="92.4841%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (38 samples, 0.18%)</title><rect x="92.2149%" y="245" width="0.1818%" height="15" fill="rgb(211,220,0)" fg:x="19272" fg:w="38"/><text x="92.4649%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (30 samples, 0.14%)</title><rect x="92.2532%" y="229" width="0.1435%" height="15" fill="rgb(229,52,16)" fg:x="19280" fg:w="30"/><text x="92.5032%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.14%)</title><rect x="92.2532%" y="213" width="0.1435%" height="15" fill="rgb(212,155,18)" fg:x="19280" fg:w="30"/><text x="92.5032%" y="223.50"></text></g><g><title>csv_sql`alloc::sync::Arc&lt;T&gt;::drop_slow (605 samples, 2.89%)</title><rect x="89.5689%" y="261" width="2.8949%" height="15" fill="rgb(242,21,14)" fg:x="18719" fg:w="605"/><text x="89.8189%" y="271.50">cs..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (14 samples, 0.07%)</title><rect x="92.3968%" y="245" width="0.0670%" height="15" fill="rgb(222,19,48)" fg:x="19310" fg:w="14"/><text x="92.6468%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (14 samples, 0.07%)</title><rect x="92.3968%" y="229" width="0.0670%" height="15" fill="rgb(232,45,27)" fg:x="19310" fg:w="14"/><text x="92.6468%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="92.4685%" y="261" width="0.0144%" height="15" fill="rgb(249,103,42)" fg:x="19325" fg:w="3"/><text x="92.7185%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.03%)</title><rect x="92.4829%" y="261" width="0.0287%" height="15" fill="rgb(246,81,33)" fg:x="19328" fg:w="6"/><text x="92.7329%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.01%)</title><rect x="92.4972%" y="245" width="0.0144%" height="15" fill="rgb(252,33,42)" fg:x="19331" fg:w="3"/><text x="92.7472%" y="255.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;arrow_array::array::byte_array::GenericByteArray&lt;arrow_array::types::GenericBinaryType&lt;i32&gt;&gt;&gt; (618 samples, 2.96%)</title><rect x="89.5593%" y="277" width="2.9571%" height="15" fill="rgb(209,212,41)" fg:x="18717" fg:w="618"/><text x="89.8093%" y="287.50">csv..</text></g><g><title>libsystem_kernel.dylib`madvise (41 samples, 0.20%)</title><rect x="92.5451%" y="245" width="0.1962%" height="15" fill="rgb(207,154,6)" fg:x="19341" fg:w="41"/><text x="92.7951%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`large_entry_for_pointer_no_lock (6 samples, 0.03%)</title><rect x="92.7508%" y="229" width="0.0287%" height="15" fill="rgb(223,64,47)" fg:x="19384" fg:w="6"/><text x="93.0008%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_size (3 samples, 0.01%)</title><rect x="92.7796%" y="229" width="0.0144%" height="15" fill="rgb(211,161,38)" fg:x="19390" fg:w="3"/><text x="93.0296%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.07%)</title><rect x="92.7413%" y="245" width="0.0670%" height="15" fill="rgb(219,138,40)" fg:x="19382" fg:w="14"/><text x="92.9913%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.01%)</title><rect x="92.7939%" y="229" width="0.0144%" height="15" fill="rgb(241,228,46)" fg:x="19393" fg:w="3"/><text x="93.0439%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`large_entry_free_no_lock (3 samples, 0.01%)</title><rect x="92.8274%" y="229" width="0.0144%" height="15" fill="rgb(223,209,38)" fg:x="19400" fg:w="3"/><text x="93.0774%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (692 samples, 3.31%)</title><rect x="92.8418%" y="213" width="3.3112%" height="15" fill="rgb(236,164,45)" fg:x="19403" fg:w="692"/><text x="93.0918%" y="223.50">lib..</text></g><g><title>libsystem_malloc.dylib`free_large (700 samples, 3.35%)</title><rect x="92.8083%" y="245" width="3.3494%" height="15" fill="rgb(231,15,5)" fg:x="19396" fg:w="700"/><text x="93.0583%" y="255.50">lib..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (693 samples, 3.32%)</title><rect x="92.8418%" y="229" width="3.3159%" height="15" fill="rgb(252,35,15)" fg:x="19403" fg:w="693"/><text x="93.0918%" y="239.50">lib..</text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.03%)</title><rect x="96.1625%" y="229" width="0.0335%" height="15" fill="rgb(248,181,18)" fg:x="20097" fg:w="7"/><text x="96.4125%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (32 samples, 0.15%)</title><rect x="96.1960%" y="229" width="0.1531%" height="15" fill="rgb(233,39,42)" fg:x="20104" fg:w="32"/><text x="96.4460%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (146 samples, 0.70%)</title><rect x="96.1577%" y="245" width="0.6986%" height="15" fill="rgb(238,110,33)" fg:x="20096" fg:w="146"/><text x="96.4077%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (104 samples, 0.50%)</title><rect x="96.3587%" y="229" width="0.4976%" height="15" fill="rgb(233,195,10)" fg:x="20138" fg:w="104"/><text x="96.6087%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (104 samples, 0.50%)</title><rect x="96.3587%" y="213" width="0.4976%" height="15" fill="rgb(254,105,3)" fg:x="20138" fg:w="104"/><text x="96.6087%" y="223.50"></text></g><g><title>csv_sql`alloc::sync::Arc&lt;T&gt;::drop_slow (920 samples, 4.40%)</title><rect x="92.5355%" y="261" width="4.4021%" height="15" fill="rgb(221,225,9)" fg:x="19339" fg:w="920"/><text x="92.7855%" y="271.50">csv_s..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (15 samples, 0.07%)</title><rect x="96.8659%" y="245" width="0.0718%" height="15" fill="rgb(224,227,45)" fg:x="20244" fg:w="15"/><text x="97.1159%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (15 samples, 0.07%)</title><rect x="96.8659%" y="229" width="0.0718%" height="15" fill="rgb(229,198,43)" fg:x="20244" fg:w="15"/><text x="97.1159%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="96.9377%" y="261" width="0.0144%" height="15" fill="rgb(206,209,35)" fg:x="20259" fg:w="3"/><text x="97.1877%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (6 samples, 0.03%)</title><rect x="96.9855%" y="229" width="0.0287%" height="15" fill="rgb(245,195,53)" fg:x="20269" fg:w="6"/><text x="97.2355%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.01%)</title><rect x="96.9999%" y="213" width="0.0144%" height="15" fill="rgb(240,92,26)" fg:x="20272" fg:w="3"/><text x="97.2499%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (11 samples, 0.05%)</title><rect x="97.0190%" y="229" width="0.0526%" height="15" fill="rgb(207,40,23)" fg:x="20276" fg:w="11"/><text x="97.2690%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (27 samples, 0.13%)</title><rect x="96.9520%" y="261" width="0.1292%" height="15" fill="rgb(223,111,35)" fg:x="20262" fg:w="27"/><text x="97.2020%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (23 samples, 0.11%)</title><rect x="96.9711%" y="245" width="0.1101%" height="15" fill="rgb(229,147,28)" fg:x="20266" fg:w="23"/><text x="97.2211%" y="255.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::Int8Type&gt;&gt; (955 samples, 4.57%)</title><rect x="92.5164%" y="277" width="4.5696%" height="15" fill="rgb(211,29,28)" fg:x="19335" fg:w="955"/><text x="92.7664%" y="287.50">csv_s..</text></g><g><title>csv_sql`alloc::sync::Arc&lt;T&gt;::drop_slow (1,578 samples, 7.55%)</title><rect x="89.5497%" y="293" width="7.5506%" height="15" fill="rgb(228,72,33)" fg:x="18715" fg:w="1578"/><text x="89.7997%" y="303.50">csv_sql`al..</text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.02%)</title><rect x="97.1482%" y="261" width="0.0191%" height="15" fill="rgb(205,214,31)" fg:x="20303" fg:w="4"/><text x="97.3982%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (4 samples, 0.02%)</title><rect x="97.1673%" y="261" width="0.0191%" height="15" fill="rgb(224,111,15)" fg:x="20307" fg:w="4"/><text x="97.4173%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4 samples, 0.02%)</title><rect x="97.1673%" y="245" width="0.0191%" height="15" fill="rgb(253,21,26)" fg:x="20307" fg:w="4"/><text x="97.4173%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.02%)</title><rect x="97.1865%" y="261" width="0.0239%" height="15" fill="rgb(245,139,43)" fg:x="20311" fg:w="5"/><text x="97.4365%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.03%)</title><rect x="97.2104%" y="261" width="0.0335%" height="15" fill="rgb(252,170,7)" fg:x="20316" fg:w="7"/><text x="97.4604%" y="271.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (1,616 samples, 7.73%)</title><rect x="89.5210%" y="309" width="7.7324%" height="15" fill="rgb(231,118,14)" fg:x="18709" fg:w="1616"/><text x="89.7710%" y="319.50">csv_sql`cor..</text></g><g><title>libsystem_malloc.dylib`free_tiny (30 samples, 0.14%)</title><rect x="97.1099%" y="293" width="0.1435%" height="15" fill="rgb(238,83,0)" fg:x="20295" fg:w="30"/><text x="97.3599%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (26 samples, 0.12%)</title><rect x="97.1290%" y="277" width="0.1244%" height="15" fill="rgb(221,39,39)" fg:x="20299" fg:w="26"/><text x="97.3790%" y="287.50"></text></g><g><title>csv_sql`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_array::record_batch::RecordBatch&gt;&gt; (1,620 samples, 7.75%)</title><rect x="89.5115%" y="325" width="7.7516%" height="15" fill="rgb(222,119,46)" fg:x="18707" fg:w="1620"/><text x="89.7615%" y="335.50">csv_sql`cor..</text></g><g><title>csv_sql`datafusion::dataframe::DataFrame::show::_{{closure}} (20,329 samples, 97.27%)</title><rect x="0.0144%" y="341" width="97.2726%" height="15" fill="rgb(222,165,49)" fg:x="3" fg:w="20329"/><text x="0.2644%" y="351.50">csv_sql`datafusion::dataframe::DataFrame::show::_{{closure}}</text></g><g><title>csv_sql`datafusion::dataframe::DataFrame::create_physical_plan::_{{closure}} (4 samples, 0.02%)</title><rect x="97.2678%" y="325" width="0.0191%" height="15" fill="rgb(219,113,52)" fg:x="20328" fg:w="4"/><text x="97.5178%" y="335.50"></text></g><g><title>csv_sql`datafusion::execution::context::SessionState::optimize (4 samples, 0.02%)</title><rect x="97.2678%" y="309" width="0.0191%" height="15" fill="rgb(214,7,15)" fg:x="20328" fg:w="4"/><text x="97.5178%" y="319.50"></text></g><g><title>csv_sql`datafusion::execution::context::SessionContext::execute_logical_plan::_{{closure}} (4 samples, 0.02%)</title><rect x="97.2870%" y="325" width="0.0191%" height="15" fill="rgb(235,32,4)" fg:x="20332" fg:w="4"/><text x="97.5370%" y="335.50"></text></g><g><title>csv_sql`&lt;datafusion::datasource::listing_table_factory::ListingTableFactory as datafusion::datasource::provider::TableProviderFactory&gt;::create::_{{closure}} (4 samples, 0.02%)</title><rect x="97.2870%" y="309" width="0.0191%" height="15" fill="rgb(238,90,54)" fg:x="20332" fg:w="4"/><text x="97.5370%" y="319.50"></text></g><g><title>csv_sql`&lt;datafusion::datasource::file_format::parquet::ParquetFormat as datafusion::datasource::file_format::FileFormat&gt;::infer_schema::_{{closure}} (4 samples, 0.02%)</title><rect x="97.2870%" y="293" width="0.0191%" height="15" fill="rgb(213,208,19)" fg:x="20332" fg:w="4"/><text x="97.5370%" y="303.50"></text></g><g><title>csv_sql`datafusion::datasource::file_format::parquet::fetch_parquet_metadata::_{{closure}} (3 samples, 0.01%)</title><rect x="97.2917%" y="277" width="0.0144%" height="15" fill="rgb(233,156,4)" fg:x="20333" fg:w="3"/><text x="97.5417%" y="287.50"></text></g><g><title>csv_sql`parquet::file::footer::read_metadata (3 samples, 0.01%)</title><rect x="97.2917%" y="261" width="0.0144%" height="15" fill="rgb(207,194,5)" fg:x="20333" fg:w="3"/><text x="97.5417%" y="271.50"></text></g><g><title>csv_sql`datafusion::execution::context::SessionContext::sql::_{{closure}} (7 samples, 0.03%)</title><rect x="97.2870%" y="341" width="0.0335%" height="15" fill="rgb(206,111,30)" fg:x="20332" fg:w="7"/><text x="97.5370%" y="351.50"></text></g><g><title>csv_sql`csv_sql::main::_{{closure}} (20,338 samples, 97.32%)</title><rect x="0.0096%" y="357" width="97.3157%" height="15" fill="rgb(243,70,54)" fg:x="2" fg:w="20338"/><text x="0.2596%" y="367.50">csv_sql`csv_sql::main::_{{closure}}</text></g><g><title>csv_sql`main (20,342 samples, 97.33%)</title><rect x="0.0048%" y="405" width="97.3348%" height="15" fill="rgb(242,28,8)" fg:x="1" fg:w="20342"/><text x="0.2548%" y="415.50">csv_sql`main</text></g><g><title>csv_sql`std::sys_common::backtrace::__rust_begin_short_backtrace (20,342 samples, 97.33%)</title><rect x="0.0048%" y="389" width="97.3348%" height="15" fill="rgb(219,106,18)" fg:x="1" fg:w="20342"/><text x="0.2548%" y="399.50">csv_sql`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>csv_sql`csv_sql::main (20,342 samples, 97.33%)</title><rect x="0.0048%" y="373" width="97.3348%" height="15" fill="rgb(244,222,10)" fg:x="1" fg:w="20342"/><text x="0.2548%" y="383.50">csv_sql`csv_sql::main</text></g><g><title>csv_sql`0x1 (20,349 samples, 97.37%)</title><rect x="0.0000%" y="437" width="97.3683%" height="15" fill="rgb(236,179,52)" fg:x="0" fg:w="20349"/><text x="0.2500%" y="447.50">csv_sql`0x1</text></g><g><title>libdyld.dylib`start (20,348 samples, 97.36%)</title><rect x="0.0048%" y="421" width="97.3635%" height="15" fill="rgb(213,23,39)" fg:x="1" fg:w="20348"/><text x="0.2548%" y="431.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (6 samples, 0.03%)</title><rect x="97.3396%" y="405" width="0.0287%" height="15" fill="rgb(238,48,10)" fg:x="20343" fg:w="6"/><text x="97.5896%" y="415.50"></text></g><g><title>csv_sql`object_store::local::read_range (544 samples, 2.60%)</title><rect x="97.3874%" y="325" width="2.6030%" height="15" fill="rgb(251,196,23)" fg:x="20353" fg:w="544"/><text x="97.6374%" y="335.50">cs..</text></g><g><title>libsystem_kernel.dylib`read (544 samples, 2.60%)</title><rect x="97.3874%" y="309" width="2.6030%" height="15" fill="rgb(250,152,24)" fg:x="20353" fg:w="544"/><text x="97.6374%" y="319.50">li..</text></g><g><title>csv_sql`&lt;object_store::local::LocalFileSystem as object_store::ObjectStore&gt;::get_ranges::_{{closure}}::_{{closure}} (547 samples, 2.62%)</title><rect x="97.3779%" y="341" width="2.6174%" height="15" fill="rgb(209,150,17)" fg:x="20351" fg:w="547"/><text x="97.6279%" y="351.50">cs..</text></g><g><title>all (20,899 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(234,202,34)" fg:x="0" fg:w="20899"/><text x="0.2500%" y="463.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (550 samples, 2.63%)</title><rect x="97.3683%" y="437" width="2.6317%" height="15" fill="rgb(253,148,53)" fg:x="20349" fg:w="550"/><text x="97.6183%" y="447.50">li..</text></g><g><title>libsystem_pthread.dylib`_pthread_start (550 samples, 2.63%)</title><rect x="97.3683%" y="421" width="2.6317%" height="15" fill="rgb(218,129,16)" fg:x="20349" fg:w="550"/><text x="97.6183%" y="431.50">li..</text></g><g><title>csv_sql`std::sys::unix::thread::Thread::new::thread_start (549 samples, 2.63%)</title><rect x="97.3731%" y="405" width="2.6269%" height="15" fill="rgb(216,85,19)" fg:x="20350" fg:w="549"/><text x="97.6231%" y="415.50">cs..</text></g><g><title>csv_sql`core::ops::function::FnOnce::call_once{{vtable.shim}} (549 samples, 2.63%)</title><rect x="97.3731%" y="389" width="2.6269%" height="15" fill="rgb(235,228,7)" fg:x="20350" fg:w="549"/><text x="97.6231%" y="399.50">cs..</text></g><g><title>csv_sql`std::sys_common::backtrace::__rust_begin_short_backtrace (549 samples, 2.63%)</title><rect x="97.3731%" y="373" width="2.6269%" height="15" fill="rgb(245,175,0)" fg:x="20350" fg:w="549"/><text x="97.6231%" y="383.50">cs..</text></g><g><title>csv_sql`tokio::runtime::task::raw::poll (548 samples, 2.62%)</title><rect x="97.3779%" y="357" width="2.6221%" height="15" fill="rgb(208,168,36)" fg:x="20351" fg:w="548"/><text x="97.6279%" y="367.50">cs..</text></g></svg></svg>